<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue Router</title>
      <link href="/2020/02/10/Vue%20Router/"/>
      <url>/2020/02/10/Vue%20Router/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue知识点</title>
      <link href="/2020/01/10/Vue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/01/10/Vue%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install axios</span><br><span class="line"><span class="comment">//引入main.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line">Vue.prototype.$http = axios.create(&#123;</span><br><span class="line">  baseUrl: <span class="string">'http:localhost:3001/api'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//调用接口</span></span><br><span class="line"><span class="keyword">this</span>.$http.post(<span class="string">'articles'</span>,<span class="keyword">this</span>.article).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$http.delete(<span class="string">`articles/<span class="subst">$&#123;id&#125;</span>`</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-token</title>
      <link href="/2019/10/11/Token/"/>
      <url>/2019/10/11/Token/</url>
      
        <content type="html"><![CDATA[<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>在计算机身份认证中是令牌（临时）的意思，在词法分析中是标记的意思。一般我们所说的的 token 大多是指用于身份验证的 token</p><h2 id="Token的特点"><a href="#Token的特点" class="headerlink" title="Token的特点"></a>Token的特点</h2><ul><li>随机性</li><li>不可预测性</li><li>时效性</li><li>无状态、可扩展</li><li>跨域</li></ul><h2 id="基于Token的身份验证场景"><a href="#基于Token的身份验证场景" class="headerlink" title="基于Token的身份验证场景"></a>基于Token的身份验证场景</h2><ol><li>客户端使用用户名和密码请求登录</li><li>服务端收到请求，验证登录是否成功</li><li>验证成功后，服务端会返回一个 Token 给客户端，反之，返回身份验证失败的信息</li><li>客户端收到 Token 后把 Token 用一种方式(cookie/localstorage/sessionstorage/其他)存储起来</li><li>客户端每次发起请求时都选哦将 Token 发给服务端</li><li>服务端收到请求后，验证Token的合法性，合法就返回客户端所需数据，反之，返回验证失败的信息</li></ol><h2 id="Token-身份验证实现-——-jsonwebtoken"><a href="#Token-身份验证实现-——-jsonwebtoken" class="headerlink" title="Token 身份验证实现 —— jsonwebtoken"></a>Token 身份验证实现 —— jsonwebtoken</h2><p>先安装第三方模块 jsonwebtoken <code>npm install jsonwebtoken</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'/'</span>)));</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Auth, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">          res.sendStatus(<span class="number">200</span>);<span class="comment">/*让options请求快速返回*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">          next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/createtoken'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    <span class="comment">//要生成 token 的主题信息</span></span><br><span class="line">    <span class="keyword">let</span> user = &#123;</span><br><span class="line">        username: <span class="string">'admin'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这是加密的 key（密钥）</span></span><br><span class="line">    <span class="keyword">let</span> secret = <span class="string">'dktoken'</span>;</span><br><span class="line">    <span class="comment">//生成 Token</span></span><br><span class="line">    <span class="keyword">let</span> token = jwt.sign(user, secret, &#123;</span><br><span class="line">        <span class="string">'expiresIn'</span>: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span> <span class="comment">// 设置过期时间, 24 小时</span></span><br><span class="line">    &#125;)      </span><br><span class="line">    response.send(&#123;<span class="attr">status</span>: <span class="literal">true</span>, token&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/verifytoken'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    <span class="comment">//这是加密的 key（密钥），和生成 token 时的必须一样</span></span><br><span class="line">    <span class="keyword">let</span> secret = <span class="string">'dktoken'</span>;</span><br><span class="line">    <span class="keyword">let</span> token = request.headers[<span class="string">'auth'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">        response.send(&#123;<span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">'token不能为空'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    jwt.verify(token, secret, (error, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            response.send(&#123;<span class="attr">status</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.send(&#123;<span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">data</span>: result&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">88</span>)</span><br></pre></td></tr></table></figure><h3 id="前端-ajax-请求时在请求头中包含-Token"><a href="#前端-ajax-请求时在请求头中包含-Token" class="headerlink" title="前端 ajax 请求时在请求头中包含 Token"></a>前端 ajax 请求时在请求头中包含 Token</h3><h4 id="ajax-请求之-jQuery-篇"><a href="#ajax-请求之-jQuery-篇" class="headerlink" title="ajax 请求之 jQuery 篇"></a>ajax 请求之 jQuery 篇</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'verifytoken'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    headers: &#123;<span class="string">"auth"</span>: <span class="string">'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTIzNTQwNjY5LCJleHAiOjE1MjM2MjcwNjl9.ddkS5XEiMzvNQsk9UlMPhyxPSq5S_oh3Nq19eIm9AJU'</span>&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ajax-请求之-XMLHttpRequest-篇"><a href="#ajax-请求之-XMLHttpRequest-篇" class="headerlink" title="ajax 请求之 XMLHttpRequest 篇"></a>ajax 请求之 XMLHttpRequest 篇</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>,<span class="string">"verifytoken"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'auth'</span>, <span class="string">'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTIzNTQwNjY5LCJleHAiOjE1MjM2MjcwNjl9.ddkS5XEiMzvNQsk9UlMPhyxPSq5S_oh3Nq19eIm9AJU'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h4 id="ajax-请求之-axios-篇"><a href="#ajax-请求之-axios-篇" class="headerlink" title="ajax 请求之 axios 篇"></a>ajax 请求之 axios 篇</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    params: _params || &#123;&#125;,</span><br><span class="line">    headers: &#123;<span class="attr">auth</span>: <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'dktoken'</span>)&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!res.data.status &amp;&amp; res.data.error == <span class="string">"unauthorized"</span>)&#123;</span><br><span class="line">        router.push(<span class="string">'login'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ajax-请求之-superagent-篇"><a href="#ajax-请求之-superagent-篇" class="headerlink" title="ajax 请求之 superagent 篇"></a>ajax 请求之 superagent 篇</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'superagent'</span></span><br><span class="line">http.post(getUrl(path))</span><br><span class="line">    .set(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>)</span><br><span class="line">    .set(<span class="string">'auth'</span>,  <span class="built_in">window</span>.localStorage.getItem(<span class="string">'access_token'</span>))</span><br><span class="line">    .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2019/09/26/Websocket/"/>
      <url>/2019/09/26/Websocket/</url>
      
        <content type="html"><![CDATA[<h1 id="重温-HTTP-协议"><a href="#重温-HTTP-协议" class="headerlink" title="重温 HTTP 协议"></a>重温 HTTP 协议</h1><p>HTTP 协议可以总结几个特点：</p><ul><li>一次性的、无状态的短连接：客户端发起请求、服务端响应、结束。</li><li>被动性响应：只有当客户端请求时才被执行，给予响应，不能主动向客户端发起响应。</li><li>信息安全性：得在服务器添加 SSL 证书，访问时用 HTTPS。</li><li>跨域：服务器默认不支持跨域，可在服务端设置支持跨域的代码或对应的配置。</li></ul><h1 id="认识-TCP"><a href="#认识-TCP" class="headerlink" title="认识 TCP"></a>认识 TCP</h1><p>TCP 协议可以总结几个特点：</p><ul><li>有状态的长连接：客户端发起连接请求，服务端响应并建立连接，连接会一直保持直到一方主动断开。</li><li>主动性：建立起与客户端的连接后，服务端可主动向客户端发起调用。</li><li>信息安全性：同样可以使用 SSL 证书进行信息加密，访问时用 WSS 。</li><li>跨域：默认支持跨域。</li></ul><h1 id="认识-WebSocket"><a href="#认识-WebSocket" class="headerlink" title="认识 WebSocket"></a>认识 WebSocket</h1><p>WebSocket 目前由 W3C 进行标准化。WebSocket 已经受到 Firefox 4、Chrome 4、Opera 10.70 以及Safari 5 等浏览器的支持。<br>如果在前端我们可以把 AJAX 请求当作一个 HTTP 协议的实现，那么，WebSocket 就是 UDP 协议的一种实现。</p><h1 id="服务端-API"><a href="#服务端-API" class="headerlink" title="服务端 API"></a>服务端 API</h1><ul><li>安装第三方模块 ws：<code>npm install ws</code></li><li>开启一个 WebSocket 的服务器，端口为 8080<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server;</span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> socketServer(&#123;</span><br><span class="line">port: <span class="number">8080</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>也可以利用 Express 来开启 WebSocket 的服务器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server;</span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> socketServer(&#123;<span class="attr">server</span>: server, <span class="attr">port</span>: <span class="number">8080</span>&#125;);</span><br></pre></td></tr></table></figure></li><li>用 on 来进行事件监听</li><li>connection：连接监听，当客户端连接到服务端时触发该事件</li><li>close：连接断开监听，当客户端断开与服务器的连接时触发</li><li>message：消息接受监听，当客户端向服务端发送信息时触发该事件</li><li>send: 向客户端推送信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _messageObj = <span class="built_in">JSON</span>.parse(_message);</span><br><span class="line">        <span class="comment">//status = 1 表示正常聊天</span></span><br><span class="line">        _messageObj.status = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = _messageObj;</span><br><span class="line">        <span class="comment">//把客户端的消息广播给所有在线的用户</span></span><br><span class="line">        wss.broadcast(_messageObj);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出聊天  </span></span><br><span class="line">    client.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message || &#123;&#125;;</span><br><span class="line">            <span class="comment">// status = 0 表示退出聊天</span></span><br><span class="line">            <span class="keyword">this</span>.message.status = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//把客户端的消息广播给所有在线的用户</span></span><br><span class="line">            wss.broadcast(<span class="keyword">this</span>.message);  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'刷新页面了'</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义广播方法</span></span><br><span class="line">wss.broadcast = <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">_messageObj</span>) </span>&#123;  </span><br><span class="line">    wss.clients.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123; </span><br><span class="line">        client.send(<span class="built_in">JSON</span>.stringify(_messageObj))</span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h1><ul><li>在支持 WebSocket 的浏览器下实例化 WebSocket ，参数为 WebSocket 服务器地址，建立与服务器的连接<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!WebSocket)&#123;</span><br><span class="line">    $(<span class="string">'.connState'</span>).text(<span class="string">"您的浏览器不支持WebSocket"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//连接 socket 服务器</span></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span><br></pre></td></tr></table></figure></li><li>onopen：当网络连接建立时触发该事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听 socket 的连接</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.connState'</span>).text(<span class="string">"服务已连接 ws://localhost:8080"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>onclose：当服务端关闭时触发该事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听服务端断开</span></span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.connState'</span>).text(<span class="string">"服务已断开"</span>);</span><br><span class="line">    socket = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>close: 在客户端断开与服务端的连接 <code>socket.close();</code></li><li>onerror：当网络发生错误时触发该事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听服务端异常</span></span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.connState'</span>).text(<span class="string">"服务错误"</span>);</span><br><span class="line">    socket = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>onmessage：当接收到服务器发来的消息的时触发的事件，也是通信中最重要的一个监听事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听服务端广播过来的消息</span></span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msgObj = <span class="built_in">JSON</span>.parse(msg.data);</span><br><span class="line">    <span class="keyword">if</span>(msgObj.status == <span class="number">0</span>)&#123;</span><br><span class="line">        $(<span class="string">'&lt;p&gt;'</span> + msgObj.nickname + <span class="string">'['</span> + msgObj.time + <span class="string">']退出聊天&lt;/p&gt;'</span>).appendTo(<span class="string">'.msgList'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">'&lt;p&gt;'</span> + msgObj.nickname + <span class="string">'['</span> + msgObj.time + <span class="string">']：'</span> + msgObj.message + <span class="string">'&lt;/p&gt;'</span>).appendTo(<span class="string">'.msgList'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>send：向服务端推送消息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params">_mess</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(socket)&#123;</span><br><span class="line">        <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> now = myDate.getMonth() + <span class="string">'-'</span> + myDate.getDate() + <span class="string">' '</span> + myDate.getHours() + <span class="string">':'</span> + myDate.getMinutes() + <span class="string">':'</span> + myDate.getSeconds();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> mesObj = &#123;</span><br><span class="line">            nickname: $(<span class="string">'#nickName'</span>).val(),</span><br><span class="line">            message: _mess || $(<span class="string">'#mesBox'</span>).val(),</span><br><span class="line">            time: now</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向服务端发送消息</span></span><br><span class="line">        socket.send(<span class="built_in">JSON</span>.stringify(mesObj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><p>该案例是一个多人聊天室</p><p>运行步骤</p><ul><li>npm install ws</li><li>node socketServer</li></ul><p>案例思路</p><ul><li>服务端开户一个服务 <code>new socketServer({port: 8080});</code></li><li>客户端建立和服务端的连接 <code>var socket = new WebSocket(&#39;ws://localhost:8080&#39;);</code></li><li>建立连接的同时发送上线信息给服务端 <code>socket.send(&#39;加入聊天&#39;);</code></li><li>服务端接受到客户端的消息触发 message 方法，然后将该消息广播给所有在线的用户</li><li>所有客户端收到来自服务端广播的消息，然后将该消息显示在聊天列表。</li><li>聊天和退出聊天都是重复着客户端发送消息，服务端接受消息然后向客户端广播消息，客户端显示广播消息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session</title>
      <link href="/2019/09/12/Node-session/"/>
      <url>/2019/09/12/Node-session/</url>
      
        <content type="html"><![CDATA[<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>Session 是一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session 保存在服务器上的进程中。</p><p>客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。</p><p>如果说 Cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 Session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。</p><p>Session 相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><p>Session 不能跨域</p><h2 id="Session-与-Cookie-的区别"><a href="#Session-与-Cookie-的区别" class="headerlink" title="Session 与 Cookie 的区别"></a>Session 与 Cookie 的区别</h2><ul><li>Cookie 数据存放在客户的浏览器上，Session 数据放在服务器上的进程中。</li><li>Cookie 不是很安全，别人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗 考虑到安全应当使用 Session。</li><li>Session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能</li><li>单个 Cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个 Cookie。</li></ul><h2 id="Session-应用"><a href="#Session-应用" class="headerlink" title="Session 应用"></a>Session 应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(cp());</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">'12345'</span>,<span class="comment">//用来对session数据进行加密的字符串.这个属性值为必须指定的属性</span></span><br><span class="line">    name: <span class="string">'testapp'</span>,   <span class="comment">//这里的name值得是cookie的name，默认cookie的name是：connect.sid</span></span><br><span class="line">    cookie: &#123;<span class="attr">maxAge</span>: <span class="number">5000</span> &#125;,  <span class="comment">//设置maxAge是5000ms，即5s后session和相应的cookie失效过期</span></span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,    </span><br><span class="line">&#125;))</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'/'</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/setsession'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    request.session.user = &#123;<span class="attr">username</span>: <span class="string">'admin'</span>&#125;;</span><br><span class="line">    response.send(<span class="string">'set session success'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/getsession'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    response.send(request.session.user);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/delsession'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">delete</span> reqeust.session.user;</span><br><span class="line">    response.send(request.session.user);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">88</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-router</title>
      <link href="/2019/09/11/Node-router/"/>
      <url>/2019/09/11/Node-router/</url>
      
        <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>在 BS 架构中，路由的概念都是一样的，可理解为根据客户端请求的 URL 映射到不同的方法实现，更多的一般都是针对 URL 中的路径，或者是参数，又或者是锚点这些信息进行映射。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol><li>注册一个账户 –&gt; [post] –&gt; <a href="http://localhost:88/register" target="_blank" rel="noopener">http://localhost:88/register</a></li><li>注册成功的情况下跳转到登录界面进行登录 –&gt; [post] –&gt; <a href="http://localhost:88/login" target="_blank" rel="noopener">http://localhost:88/login</a></li><li>登录成功进行获取学生信息 –&gt; [get] –&gt; <a href="http://localhost:88/students" target="_blank" rel="noopener">http://localhost:88/students</a></li><li>同时可以获取订单信息 –&gt; [get] –&gt; <a href="http://localhost:88/orders" target="_blank" rel="noopener">http://localhost:88/orders</a></li><li>如何访问不存在的路由则抛出错误信息。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> urlObj = url.parse(request.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> pathname = urlObj.pathname;</span><br><span class="line">    <span class="keyword">let</span> method = request.method.toUpperCase();</span><br><span class="line">    <span class="keyword">let</span> params = urlObj.query;</span><br><span class="line">    <span class="keyword">if</span>(method == <span class="string">'POST'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">        request.on(<span class="string">'data'</span>, (_data) =&gt; &#123;</span><br><span class="line">            postData += <span class="string">'_data'</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        request.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            postData = qs.parse(postData);</span><br><span class="line">            <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">switch</span>(pathname)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/login'</span>:</span><br><span class="line">                    <span class="comment">//连接数据库，实现登陆逻辑</span></span><br><span class="line">                    result = &#123;<span class="attr">status</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/register'</span>:</span><br><span class="line">                    <span class="comment">//连接数据库，实现注册逻辑</span></span><br><span class="line">                    result = &#123;<span class="attr">status</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span> :</span><br><span class="line">                    result = &#123;<span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">'没有对应的请求'</span>&#125;;</span><br><span class="line">                    <span class="keyword">break</span>;                  </span><br><span class="line">            &#125;</span><br><span class="line">            response.end(util.inspect(result))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">        <span class="keyword">switch</span>(pathname)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/students'</span>:</span><br><span class="line">                <span class="comment">//连接数据库，获取学生信息</span></span><br><span class="line">                result = &#123;<span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">data</span>: [], params&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/orders'</span>:</span><br><span class="line">                <span class="comment">//连接数据库，获取订单信息</span></span><br><span class="line">                result = &#123;<span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">data</span>: [], params&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                result = &#123;<span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">'没有对应的请求'</span>, params&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.end(util.inspect(result))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">88</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-request</title>
      <link href="/2019/08/25/Node-request/"/>
      <url>/2019/08/25/Node-request/</url>
      
        <content type="html"><![CDATA[<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>一个第三方的模块，可用于发起 http 或 https 请求，可理解成服务端的 ajax 请求。可用于代简单的服务器代理，用法和 ajax 类似。</p><p>在使用前需要先安装 <code>npm install request --save</code></p><h2 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.get(<span class="string">'https://cnodejs.org/api/v1/topics?page=1&amp;limit=10'</span>, (error, response, body) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">request(<span class="string">'https://cnodejs.org/api/v1/topics?page=1&amp;limit=10'</span>, (error, response, body) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="多参数设置"><a href="#多参数设置" class="headerlink" title="多参数设置"></a>多参数设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">exports.get = <span class="function"><span class="keyword">function</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> httpOptions = &#123;</span><br><span class="line">        url: url,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        timeout: options.timeout || <span class="number">10000</span>,</span><br><span class="line">        headers: options.headers || default_post_headers,</span><br><span class="line">        proxy: options.proxy || <span class="string">''</span>,</span><br><span class="line">        agentOptions: agentOptions,</span><br><span class="line">        params: options.params || &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(options.userAgent)&#123;</span><br><span class="line">        httpOptions.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: userAgents[options.userAgent],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        request.get(httpOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                options.callback(&#123;<span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">error</span>: err&#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                options.callback(&#123;<span class="attr">status</span>: res.statusCode == <span class="number">200</span>, <span class="attr">error</span>: res, <span class="attr">data</span>: body&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).on(<span class="string">'error'</span>, logger.error);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'http error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><p>request支持application/x-www-form-urlencoded和multipart/form-data实现表单上传。</p><h3 id="application-x-www-form-urlencoded-URL-Encoded-Forms"><a href="#application-x-www-form-urlencoded-URL-Encoded-Forms" class="headerlink" title="application/x-www-form-urlencoded (URL-Encoded Forms)"></a>application/x-www-form-urlencoded (URL-Encoded Forms)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.post(<span class="string">'http://service.com/upload'</span>, &#123;<span class="attr">form</span>:&#123;<span class="attr">key</span>:<span class="string">'value'</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">request.post(<span class="string">'http://service.com/upload'</span>).form(&#123;<span class="attr">key</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">request.post(&#123;<span class="attr">url</span>:<span class="string">'http://service.com/upload'</span>, <span class="attr">form</span>: &#123;<span class="attr">key</span>:<span class="string">'value'</span>&#125;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err,httpResponse,body</span>)</span>&#123; <span class="comment">/* ... */</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data-Multipart-Form-Uploads"><a href="#multipart-form-data-Multipart-Form-Uploads" class="headerlink" title="multipart/form-data (Multipart Form Uploads)"></a>multipart/form-data (Multipart Form Uploads)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = &#123;</span><br><span class="line">  <span class="comment">// Pass a simple key-value pair</span></span><br><span class="line">  my_field: <span class="string">'my_value'</span>,</span><br><span class="line">  <span class="comment">// Pass data via Buffers</span></span><br><span class="line">  my_buffer: <span class="keyword">new</span> Buffer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">  <span class="comment">// Pass data via Streams</span></span><br><span class="line">  my_file: fs.createReadStream(__dirname + <span class="string">'/unicycle.jpg'</span>),</span><br><span class="line">  <span class="comment">// Pass multiple values /w an Array</span></span><br><span class="line">  attachments: [</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">'/attachment1.jpg'</span>),</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">'/attachment2.jpg'</span>)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// Pass optional meta-data with an 'options' object with style: &#123;value: DATA, options: OPTIONS&#125;</span></span><br><span class="line">  <span class="comment">// Use case: for some types of streams, you'll need to provide "file"-related information manually.</span></span><br><span class="line">  <span class="comment">// See the `form-data` README for more information about options: https://github.com/form-data/form-data</span></span><br><span class="line">  custom_file: &#123;</span><br><span class="line">    value:  fs.createReadStream(<span class="string">'/dev/urandom'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">      filename: <span class="string">'topsecret.jpg'</span>,</span><br><span class="line">      contentType: <span class="string">'image/jpeg'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.post(&#123;<span class="attr">url</span>:<span class="string">'http://service.com/upload'</span>, <span class="attr">formData</span>: formData&#125;, <span class="function"><span class="keyword">function</span> <span class="title">optionalCallback</span>(<span class="params">err, httpResponse, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'upload failed:'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Upload successful!  Server responded with:'</span>, body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="常用多参数设置"><a href="#常用多参数设置" class="headerlink" title="常用多参数设置"></a>常用多参数设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exports.form_post = <span class="function"><span class="keyword">function</span>(<span class="params">url, postdata, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(`$&#123;moment().format()&#125; HttpFormPost: $&#123;url&#125;`)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> httpOptions = &#123;</span><br><span class="line">            url: url,</span><br><span class="line">            form: postdata,</span><br><span class="line">            method: <span class="string">'post'</span>,</span><br><span class="line">            timeout: options.timeout || <span class="number">3000</span>,</span><br><span class="line">            headers: options.headers || default_post_headers,</span><br><span class="line">            proxy: options.proxy || <span class="string">''</span>,</span><br><span class="line">            agentOptions: agentOptions</span><br><span class="line">        &#125;;</span><br><span class="line">        request(httpOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(body);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(res.statusCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).on(<span class="string">'error'</span>, logger.error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'http://img.zcool.cn/community/018d4e554967920000019ae9df1533.jpg@900w_1l_2o_100sh.jpg'</span>).pipe(fs.createWriteStream(<span class="string">'test.png'</span>))</span><br><span class="line">request(<span class="string">'https://cnodejs.org/api/v1/topics?page=1&amp;limit=10'</span>).pipe(fs.createWriteStream(<span class="string">'cnodejs.json'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-express</title>
      <link href="/2019/08/20/Node-express/"/>
      <url>/2019/08/20/Node-express/</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>Express 是一个第三方模块，对原生模块封装了一套更灵活、更简洁的应用框架，其在 Node.js 环境的地位和作用好比 jQuery 在前端的地位和作用。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>在 BS 架构中，路由的概念都是一样的，可理解为根据客户端请求的 URL 映射到不同的方法实现，更多的一般都是针对 URL 中的路径，或者是参数，又或者是锚点这些信息进行映射。</p><h1 id="Express-使用"><a href="#Express-使用" class="headerlink" title="Express 使用"></a>Express 使用</h1><ul><li><p>因为 Express 是第三方模块，所以在使用前要先安装 <code>npm install express</code></p></li><li><p>加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure></li><li><p>开启服务器，定义端口8080：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running on http://localhost:8080'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Express-–-GET"><a href="#Express-–-GET" class="headerlink" title="Express – GET"></a>Express – GET</h2><ul><li><p>定义根路由，我们定义端口为 8080，当我们访问：<a href="http://localhost:8080/，会自动触发方法，会在页面上显示" target="_blank" rel="noopener">http://localhost:8080/，会自动触发方法，会在页面上显示</a> Root Page。</p></li><li><p><code>response.send()</code> 可理解为 <code>response.end()</code>，其中一个不同点在于 <code>response.send()</code> 参数可为对象。</p></li><li><p>只有 GET 访问能触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    response.send(<span class="string">'Root Page'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>定义 getUsers 路由，当我们访问：<a href="http://localhost:8080/getusers，会自动触发方法，会在页面上显示" target="_blank" rel="noopener">http://localhost:8080/getusers，会自动触发方法，会在页面上显示</a> getUsers Page。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getUsers'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    response.send(<span class="string">'getUsers Page'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Node.js 默认是不能访问静态资源文件（<em>.html、</em>.js、<em>.css、</em>.jpg 等），如果要访问服务端的静态资源文件则要用到方法 <code>sendFile</code></p></li><li><p>__dirname 为 Node.js 的系统变量，指向文件的绝对路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/index.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendFile( __dirname + <span class="string">"/"</span> + <span class="string">"index.html"</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Express-–-GET-参数接收之-Query-Strings"><a href="#Express-–-GET-参数接收之-Query-Strings" class="headerlink" title="Express – GET 参数接收之 Query Strings"></a>Express – GET 参数接收之 Query Strings</h3><p>访问地址：<code>http://localhost:8080/getusers?username=dk&amp;age=18</code>，可通过 <code>request.query</code> 来获取参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getUsers'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">        username: request.query.username,</span><br><span class="line">        age: request.query.age</span><br><span class="line">    &#125;</span><br><span class="line">    response.send(params);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express-–-GET-参数接收之路径方式"><a href="#Express-–-GET-参数接收之路径方式" class="headerlink" title="Express – GET 参数接收之路径方式"></a>Express – GET 参数接收之路径方式</h3><p>访问地址：<code>http://localhost:8080/getusers/admin/18</code>，可通过 <code>request.params</code> 来获取参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getUsers/:username/:age'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">        username: request.params.username,</span><br><span class="line">        age: request.params.age</span><br><span class="line">    &#125;</span><br><span class="line">    response.send(params);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-–-POST"><a href="#Express-–-POST" class="headerlink" title="Express – POST"></a>Express – POST</h2><ul><li>post 参数接收，可依赖第三方模块 body-parser 进行转换会更方便、更简单，该模块用于处理 JSON, Raw, Text 和 URL 编码的数据。</li><li>安装 body-parser <code>npm install body-parser</code></li><li>参数接受和 GET 基本一样，不同的在于 GET 是 <code>request.query</code> 而 POST 的是 <code>request.body</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">app.post(<span class="string">'/getUsers'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">        username: request.body.username,</span><br><span class="line">        age: request.body.age</span><br><span class="line">    &#125;</span><br><span class="line">   response.send(params);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Express-–-跨域支持-放在最前面"><a href="#Express-–-跨域支持-放在最前面" class="headerlink" title="Express – 跨域支持(放在最前面)"></a>Express – 跨域支持(放在最前面)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">      res.send(<span class="number">200</span>);<span class="comment">/*让options请求快速返回*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-fs</title>
      <link href="/2019/08/15/Node-fs/"/>
      <url>/2019/08/15/Node-fs/</url>
      
        <content type="html"><![CDATA[<h1 id="文件模块-fs"><a href="#文件模块-fs" class="headerlink" title="文件模块 fs"></a>文件模块 fs</h1><p>出于安全因互，javascript 是不能操作本地文件，所以文件的处理都会放到服务端去处理。Node.js 作为一门后端动态语言，同样具备了操作文件的功能，这一操作需要用到 Node.js 的原生模块：fs。</p><h2 id="读取文本-–-异步读取"><a href="#读取文本-–-异步读取" class="headerlink" title="读取文本 – 异步读取"></a>读取文本 – 异步读取</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line"><span class="comment">// 参数1：文件路径，</span></span><br><span class="line"><span class="comment">// 参数2：读取文件后的回调</span></span><br><span class="line">fs.readFile(<span class="string">'demoFile.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"异步读取: "</span> + data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="读取文本-–-同步读取"><a href="#读取文本-–-同步读取" class="headerlink" title="读取文本 – 同步读取"></a>读取文本 – 同步读取</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'demoFile.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步读取: "</span> + data.toString());</span><br></pre></td></tr></table></figure><h2 id="写入文本-–-覆盖写入"><a href="#写入文本-–-覆盖写入" class="headerlink" title="写入文本 – 覆盖写入"></a>写入文本 – 覆盖写入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//每次写入文本都会覆盖之前的文本内容</span></span><br><span class="line">fs.writeFile(<span class="string">'input.txt'</span>, <span class="string">'抵制一切不利于中国和世界和平的动机！'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"数据写入成功！"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"--------我是分割线-------------"</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"读取写入的数据！"</span>);</span><br><span class="line">   fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步读取文件数据: "</span> + data.toString());</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="写入文本-–-追加写入"><a href="#写入文本-–-追加写入" class="headerlink" title="写入文本 – 追加写入"></a>写入文本 – 追加写入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.appendFile(<span class="string">'input.txt'</span>, <span class="string">'愿世界和平！'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"数据写入成功！"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"--------我是分割线-------------"</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"读取写入的数据！"</span>);</span><br><span class="line">   fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步读取文件数据: "</span> + data.toString());</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="图片读取"><a href="#图片读取" class="headerlink" title="图片读取"></a>图片读取</h2><p>图片读取不同于文本，因为文本读出来可以直接用 console.log() 打印，但图片则需要在浏览器中显示，所以需要先搭建 web 服务，然后把以字节方式读取的图片在浏览器中渲染。</p><ol><li>图片读取是以字节的方式</li><li>图片在浏览器的渲染因为没有 img 标签，所以需要设置响应头为 image</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> content =  fs.readFileSync(<span class="string">'001.jpg'</span>, <span class="string">"binary"</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'image/jpeg'</span>&#125;);</span><br><span class="line">response.write(content, <span class="string">"binary"</span>);</span><br><span class="line">response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-events</title>
      <link href="/2019/08/13/Node-events/"/>
      <url>/2019/08/13/Node-events/</url>
      
        <content type="html"><![CDATA[<h1 id="events-模块"><a href="#events-模块" class="headerlink" title="events 模块"></a>events 模块</h1><p>事件模块在 Node.js 中有很多好处，但用法却可以很简单</p><ul><li>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。</li><li>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。</li><li>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</li><li>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</li><li>用法<ul><li>实例化一个事件实例 new events.EventEmitter();</li><li>在实例对象上定义事件 on(eventname, function(){})</li><li>通地 emit 方法触发事件 emit(eventname)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件及事件的处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line"><span class="comment">// 触发 data_received 事件 </span></span><br><span class="line">eventEmitter.emit(<span class="string">'data_received'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用 eventEmitter 对象的 emit 方法来调用事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-dgram</title>
      <link href="/2019/08/11/Node-dgram/"/>
      <url>/2019/08/11/Node-dgram/</url>
      
        <content type="html"><![CDATA[<h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><p>UDP虽然传递数据不可靠，无连接，但是有传递速度快的特点，在传送音频、影视、图片时，少点数据无伤大雅，可以考虑用UDP。</p><h1 id="dgram模块"><a href="#dgram模块" class="headerlink" title="dgram模块"></a>dgram模块</h1><p>Node中<code>UDP</code>对应的模块是<code>dgram</code>，通过下面的方式引用<code>UDP</code>模块并创建<code>UDP</code>应用实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">var</span> udp = dgram.createSocket(<span class="string">'udp4'</span>);</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">const</span> client = dgram.createSocket(<span class="string">'udp4'</span>);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'socket已关闭'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'message'</span>, (msg, rinfo) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg == <span class="string">'exit'</span>) client.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`receive message from <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.send(<span class="string">`hello`</span>, <span class="number">8060</span>, <span class="string">'localhost'</span>);</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">const</span> server = dgram.createSocket(<span class="string">'udp4'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'socket已关闭'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'listening'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'socket正在监听中...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'message'</span>, (msg, rinfo) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`receive message from <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span>`</span>);</span><br><span class="line">    server.send(<span class="string">'exit'</span>, rinfo.port, rinfo.address)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.bind(<span class="string">'8060'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node dgram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-async</title>
      <link href="/2019/08/10/Node-async/"/>
      <url>/2019/08/10/Node-async/</url>
      
        <content type="html"><![CDATA[<h1 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h1><p>Node.js 是一个异步机制的服务端语言，在大量异步的场景下需要按顺序执行，那正常做法就是回调嵌套回调，回调嵌套太多的问题被称之回调地狱。</p><p>Node.js 为解决这一问题推出了异步控制流 ———— Async</p><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><p>Async/Await 就 ES7 的方案，结合 ES6 的 Promise 对象，使用前请确定 Node.js 的版本是 7.6 以上。</p><p>Async/await的主要益处是可以避免回调地狱（callback hell），且以最接近同步代码的方式编写异步代码。</p><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li>async 表示这是一个async函数，await只能用在这个函数里面。</li><li>await 表示在这里等待promise返回结果了，再继续执行。</li><li>await 后面跟着的应该是一个promise对象</li></ul><h3 id="对比使用"><a href="#对比使用" class="headerlink" title="对比使用"></a>对比使用</h3><p>场景：3秒后返回一个值</p><h4 id="原始时代"><a href="#原始时代" class="headerlink" title="原始时代"></a>原始时代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(<span class="string">'ok'</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    sleep(<span class="number">3000</span>, (result) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()</span><br></pre></td></tr></table></figure><h4 id="Promise-时代"><a href="#Promise-时代" class="headerlink" title="Promise 时代"></a>Promise 时代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           resolve(<span class="string">'ok'</span>) ;</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    sleep(<span class="number">3000</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()</span><br></pre></td></tr></table></figure><h4 id="Async-Await-时代"><a href="#Async-Await-时代" class="headerlink" title="Async/Await 时代"></a>Async/Await 时代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           resolve(<span class="string">'ok'</span>) ;</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><h3 id="捕捉错误"><a href="#捕捉错误" class="headerlink" title="捕捉错误"></a>捕捉错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            reject(<span class="string">'error'</span>) ;</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><h3 id="在循环中使用"><a href="#在循环中使用" class="headerlink" title="在循环中使用"></a>在循环中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'ok'</span>) ;</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`当前是第<span class="subst">$&#123;i&#125;</span>次等待..`</span>);</span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><h3 id="爬虫中使用"><a href="#爬虫中使用" class="headerlink" title="爬虫中使用"></a>爬虫中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spider = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        request(url, (error, response, body) =&gt; &#123;</span><br><span class="line">            resolve(body);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="keyword">await</span> spider(<span class="string">'http://www.lanrentuku.com/'</span>);</span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.load(dom);</span><br><span class="line">    $(<span class="string">'img'</span>, <span class="string">'.in-ne'</span>).each(<span class="function">(<span class="params">i, e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> src = $(e).attr(<span class="string">'src'</span>);</span><br><span class="line">        <span class="keyword">let</span> name = src.substr(src.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>);</span><br><span class="line">        request(src).pipe(fs.createWriteStream(name))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性</title>
      <link href="/2019/08/05/ES6/"/>
      <url>/2019/08/05/ES6/</url>
      
        <content type="html"><![CDATA[<h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><h5 id="代码块内有效"><a href="#代码块内有效" class="headerlink" title="代码块内有效"></a>代码块内有效</h5><p>let 是在代码块内有效，var 是在全局范围内有效:</p><h5 id="不能重复声明"><a href="#不能重复声明" class="headerlink" title="不能重复声明"></a>不能重复声明</h5><p>let 只能声明一次 var 可以声明多次:<br>for 循环计数器很适合用 let</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (var i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 输出十个 10</span><br><span class="line">for (let j &#x3D; 0; j &lt; 10; j++) &#123;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    console.log(j);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 输出 0123456789</span><br></pre></td></tr></table></figure><p>变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。</p><p>变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出 12345。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。</p><h5 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h5><p>let 不存在变量提升，var 会变量提升:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);  &#x2F;&#x2F;ReferenceError: a is not defined</span><br><span class="line">let a &#x3D; &quot;apple&quot;;</span><br><span class="line"> </span><br><span class="line">console.log(b);  &#x2F;&#x2F;undefined</span><br><span class="line">var b &#x3D; &quot;banana&quot;;</span><br></pre></td></tr></table></figure><p>变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。<br>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p><h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p>const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值是对赋值运算符的扩展。<br>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。<br>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><h5 id="数组模型的解构（Array）"><a href="#数组模型的解构（Array）" class="headerlink" title="数组模型的解构（Array）"></a>数组模型的解构（Array）</h5><p>基本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c] &#x3D; [1, 2, 3];</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; b &#x3D; 2</span><br><span class="line">&#x2F;&#x2F; c &#x3D; 3</span><br></pre></td></tr></table></figure><p>可嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let [a, [[b], c]] &#x3D; [1, [[2], 3]];</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; b &#x3D; 2</span><br><span class="line">&#x2F;&#x2F; c &#x3D; 3</span><br></pre></td></tr></table></figure><p>可忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [a, , b] &#x3D; [1, 2, 3];</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; b &#x3D; 3</span><br></pre></td></tr></table></figure><p>不完全解构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a &#x3D; 1, b] &#x3D; []; &#x2F;&#x2F; a &#x3D; 1, b &#x3D; undefined</span><br></pre></td></tr></table></figure><p>剩余运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [a, ...b] &#x3D; [1, 2, 3];</span><br><span class="line">&#x2F;&#x2F;a &#x3D; 1</span><br><span class="line">&#x2F;&#x2F;b &#x3D; [2, 3]</span><br></pre></td></tr></table></figure><p>字符串等</p><p>在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 Iterator 接口的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c, d, e] &#x3D; &#39;hello&#39;;</span><br><span class="line">&#x2F;&#x2F; a &#x3D; &#39;h&#39;</span><br><span class="line">&#x2F;&#x2F; b &#x3D; &#39;e&#39;</span><br><span class="line">&#x2F;&#x2F; c &#x3D; &#39;l&#39;</span><br><span class="line">&#x2F;&#x2F; d &#x3D; &#39;l&#39;</span><br><span class="line">&#x2F;&#x2F; e &#x3D; &#39;o&#39;</span><br></pre></td></tr></table></figure><p>解构默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a &#x3D; 2] &#x3D; [undefined]; &#x2F;&#x2F; a &#x3D; 2</span><br></pre></td></tr></table></figure><p>当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [a &#x3D; 3, b &#x3D; a] &#x3D; [];     &#x2F;&#x2F; a &#x3D; 3, b &#x3D; 3</span><br><span class="line">let [a &#x3D; 3, b &#x3D; a] &#x3D; [1];    &#x2F;&#x2F; a &#x3D; 1, b &#x3D; 1</span><br><span class="line">let [a &#x3D; 3, b &#x3D; a] &#x3D; [1, 2]; &#x2F;&#x2F; a &#x3D; 1, b &#x3D; 2</span><br></pre></td></tr></table></figure><ul><li>a 与 b 匹配结果为 undefined ，触发默认值：a = 3; b = a =3</li><li>a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：b = a =1</li><li>a 与 b 正常解构赋值，匹配结果：a = 1，b = 2</li></ul><h5 id="对象模型的解构（Object）"><a href="#对象模型的解构（Object）" class="headerlink" title="对象模型的解构（Object）"></a>对象模型的解构（Object）</h5><p>基本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo, bar &#125; &#x3D; &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</span><br><span class="line">&#x2F;&#x2F; foo &#x3D; &#39;aaa&#39;</span><br><span class="line">&#x2F;&#x2F; bar &#x3D; &#39;bbb&#39;</span><br><span class="line"> </span><br><span class="line">let &#123; baz : foo &#125; &#x3D; &#123; baz : &#39;ddd&#39; &#125;;</span><br><span class="line">&#x2F;&#x2F; foo &#x3D; &#39;ddd&#39;</span><br></pre></td></tr></table></figure><p>可嵌套可忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;p: [&#39;hello&#39;, &#123;y: &#39;world&#39;&#125;] &#125;;</span><br><span class="line">let &#123;p: [x, &#123; y &#125;] &#125; &#x3D; obj;</span><br><span class="line">&#x2F;&#x2F; x &#x3D; &#39;hello&#39;</span><br><span class="line">&#x2F;&#x2F; y &#x3D; &#39;world&#39;</span><br><span class="line">let obj &#x3D; &#123;p: [&#39;hello&#39;, &#123;y: &#39;world&#39;&#125;] &#125;;</span><br><span class="line">let &#123;p: [x, &#123;  &#125;] &#125; &#x3D; obj;</span><br><span class="line">&#x2F;&#x2F; x &#x3D; &#39;hello&#39;</span><br></pre></td></tr></table></figure><p>不完全解构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;p: [&#123;y: &#39;world&#39;&#125;] &#125;;</span><br><span class="line">let &#123;p: [&#123; y &#125;, x ] &#125; &#x3D; obj;</span><br><span class="line">&#x2F;&#x2F; x &#x3D; undefined</span><br><span class="line">&#x2F;&#x2F; y &#x3D; &#39;world&#39;</span><br></pre></td></tr></table></figure><p>剩余运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;a, b, ...rest&#125; &#x3D; &#123;a: 10, b: 20, c: 30, d: 40&#125;;</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 10</span><br><span class="line">&#x2F;&#x2F; b &#x3D; 20</span><br><span class="line">&#x2F;&#x2F; rest &#x3D; &#123;c: 30, d: 40&#125;</span><br></pre></td></tr></table></figure><p>解构默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;a &#x3D; 10, b &#x3D; 5&#125; &#x3D; &#123;a: 3&#125;;</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 3; b &#x3D; 5;</span><br><span class="line">let &#123;a: aa &#x3D; 10, b: bb &#x3D; 5&#125; &#x3D; &#123;a: 3&#125;;</span><br><span class="line">&#x2F;&#x2F; aa &#x3D; 3; bb &#x3D; 5;</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名。</p><p>ES6 数据类型除了 Number 、 String 、 Boolean 、 Object、 null 和 undefined ，还新增了 Symbol 。</p><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p>Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let sy &#x3D; Symbol(&quot;KK&quot;);</span><br><span class="line">console.log(sy);   &#x2F;&#x2F; Symbol(KK)</span><br><span class="line">typeof(sy);        &#x2F;&#x2F; &quot;symbol&quot;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 相同参数 Symbol() 返回的值不相等</span><br><span class="line">let sy1 &#x3D; Symbol(&quot;kk&quot;); </span><br><span class="line">sy &#x3D;&#x3D;&#x3D; sy1;       &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><h6 id="作为属性名"><a href="#作为属性名" class="headerlink" title="作为属性名"></a>作为属性名</h6><p>由于每一个 Symbol 的值都是不相等的，所以 Symbol 作为对象的属性名，可以保证属性不重名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let sy &#x3D; Symbol(&quot;key1&quot;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 写法1</span><br><span class="line">let syObject &#x3D; &#123;&#125;;</span><br><span class="line">syObject[sy] &#x3D; &quot;kk&quot;;</span><br><span class="line">console.log(syObject);    &#x2F;&#x2F; &#123;Symbol(key1): &quot;kk&quot;&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 写法2</span><br><span class="line">let syObject &#x3D; &#123;</span><br><span class="line">  [sy]: &quot;kk&quot;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(syObject);    &#x2F;&#x2F; &#123;Symbol(key1): &quot;kk&quot;&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 写法3</span><br><span class="line">let syObject &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(syObject, sy, &#123;value: &quot;kk&quot;&#125;);</span><br><span class="line">console.log(syObject);   &#x2F;&#x2F; &#123;Symbol(key1): &quot;kk&quot;&#125;</span><br></pre></td></tr></table></figure><p>Symbol 作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 Symbol 值 sy 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let syObject &#x3D; &#123;&#125;;</span><br><span class="line">syObject[sy] &#x3D; &quot;kk&quot;;</span><br><span class="line"> </span><br><span class="line">syObject[sy];  &#x2F;&#x2F; &quot;kk&quot;</span><br><span class="line">syObject.sy;   &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><ul><li>注意点        </li></ul><blockquote><p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let syObject &#x3D; &#123;&#125;;</span><br><span class="line">syObject[sy] &#x3D; &quot;kk&quot;;</span><br><span class="line">console.log(syObject);</span><br><span class="line"> </span><br><span class="line">for (let i in syObject) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;    &#x2F;&#x2F; 无输出</span><br><span class="line"> </span><br><span class="line">Object.keys(syObject);                     &#x2F;&#x2F; []</span><br><span class="line">Object.getOwnPropertySymbols(syObject);    &#x2F;&#x2F; [Symbol(key1)]</span><br><span class="line">Reflect.ownKeys(syObject);                 &#x2F;&#x2F; [Symbol(key1)]</span><br></pre></td></tr></table></figure><h5 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h5><p>Symbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let yellow &#x3D; Symbol(&quot;Yellow&quot;);</span><br><span class="line">let yellow1 &#x3D; Symbol.for(&quot;Yellow&quot;);</span><br><span class="line">yellow &#x3D;&#x3D;&#x3D; yellow1;      &#x2F;&#x2F; false</span><br><span class="line"> </span><br><span class="line">let yellow2 &#x3D; Symbol.for(&quot;Yellow&quot;);</span><br><span class="line">yellow1 &#x3D;&#x3D;&#x3D; yellow2;     &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h5 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor()"></a>Symbol.keyFor()</h5><p>Symbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let yellow1 &#x3D; Symbol.for(&quot;Yellow&quot;);</span><br><span class="line">Symbol.keyFor(yellow1);    &#x2F;&#x2F; &quot;Yellow&quot;</span><br></pre></td></tr></table></figure><h3 id="Map-与-Set"><a href="#Map-与-Set" class="headerlink" title="Map 与 Set"></a>Map 与 Set</h3><h5 id="Map-对象"><a href="#Map-对象" class="headerlink" title="Map 对象"></a>Map 对象</h5><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><h5 id="Maps-和-Objects-的区别"><a href="#Maps-和-Objects-的区别" class="headerlink" title="Maps 和 Objects 的区别"></a>Maps 和 Objects 的区别</h5><ul><li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li><li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</li><li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。<h5 id="Map-中的-key"><a href="#Map-中的-key" class="headerlink" title="Map 中的 key"></a>Map 中的 key</h5>key 是字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var myMap &#x3D; new Map();</span><br><span class="line">var keyString &#x3D; &quot;a string&quot;; </span><br><span class="line"> </span><br><span class="line">myMap.set(keyString, &quot;和键&#39;a string&#39;关联的值&quot;);</span><br><span class="line"> </span><br><span class="line">myMap.get(keyString);    &#x2F;&#x2F; &quot;和键&#39;a string&#39;关联的值&quot;</span><br><span class="line">myMap.get(&quot;a string&quot;);   &#x2F;&#x2F; &quot;和键&#39;a string&#39;关联的值&quot;</span><br><span class="line">                         &#x2F;&#x2F; 因为 keyString &#x3D;&#x3D;&#x3D; &#39;a string&#39;</span><br></pre></td></tr></table></figure><p>key 是对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var myMap &#x3D; new Map();</span><br><span class="line">var keyObj &#x3D; &#123;&#125;, </span><br><span class="line"> </span><br><span class="line">myMap.set(keyObj, &quot;和键 keyObj 关联的值&quot;);</span><br><span class="line">myMap.get(keyObj); &#x2F;&#x2F; &quot;和键 keyObj 关联的值&quot;</span><br><span class="line">myMap.get(&#123;&#125;); &#x2F;&#x2F; undefined, 因为 keyObj !&#x3D;&#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure><p>key 是函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myMap &#x3D; new Map();</span><br><span class="line">var keyFunc &#x3D; function () &#123;&#125;, &#x2F;&#x2F; 函数</span><br><span class="line"> </span><br><span class="line">myMap.set(keyFunc, &quot;和键 keyFunc 关联的值&quot;);</span><br><span class="line"> </span><br><span class="line">myMap.get(keyFunc); &#x2F;&#x2F; &quot;和键 keyFunc 关联的值&quot;</span><br><span class="line">myMap.get(function() &#123;&#125;) &#x2F;&#x2F; undefined, 因为 keyFunc !&#x3D;&#x3D; function () &#123;&#125;</span><br></pre></td></tr></table></figure><p>key 是 NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myMap &#x3D; new Map();</span><br><span class="line">myMap.set(NaN, &quot;not a number&quot;);</span><br><span class="line"> </span><br><span class="line">myMap.get(NaN); &#x2F;&#x2F; &quot;not a number&quot;</span><br><span class="line"> </span><br><span class="line">var otherNaN &#x3D; Number(&quot;foo&quot;);</span><br><span class="line">myMap.get(otherNaN); &#x2F;&#x2F; &quot;not a number&quot;</span><br></pre></td></tr></table></figure><p>虽然 NaN 和任何值甚至和自己都不相等(NaN !== NaN 返回true)，NaN作为Map的键来说是没有区别的。</p><h5 id="Map-的迭代"><a href="#Map-的迭代" class="headerlink" title="Map 的迭代"></a>Map 的迭代</h5><p>对 Map 进行遍历，以下两个最高级。<br><strong>for…of</strong><br><strong>forEach()</strong></p><h5 id="Map-对象的操作"><a href="#Map-对象的操作" class="headerlink" title="Map 对象的操作"></a>Map 对象的操作</h5><h6 id="Map-与-Array的转换"><a href="#Map-与-Array的转换" class="headerlink" title="Map 与 Array的转换"></a>Map 与 Array的转换</h6><h6 id="Map-的克隆"><a href="#Map-的克隆" class="headerlink" title="Map 的克隆"></a>Map 的克隆</h6><h6 id="Map-的合并"><a href="#Map-的合并" class="headerlink" title="Map 的合并"></a>Map 的合并</h6><h5 id="Set-对象"><a href="#Set-对象" class="headerlink" title="Set 对象"></a>Set 对象</h5><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><h3 id="对象的拓展运算符"><a href="#对象的拓展运算符" class="headerlink" title="对象的拓展运算符"></a>对象的拓展运算符</h3><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let person &#x3D; &#123;name: &quot;Amy&quot;, age: 15&#125;;</span><br><span class="line">let someone &#x3D; &#123; ...person &#125;;</span><br><span class="line">someone;  &#x2F;&#x2F;&#123;name: &quot;Amy&quot;, age: 15&#125;</span><br></pre></td></tr></table></figure><h5 id="可用于合并两个对象"><a href="#可用于合并两个对象" class="headerlink" title="可用于合并两个对象"></a>可用于合并两个对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let age &#x3D; &#123;age: 15&#125;;</span><br><span class="line">let name &#x3D; &#123;name: &quot;Amy&quot;&#125;;</span><br><span class="line">let person &#x3D; &#123;...age, ...name&#125;;</span><br><span class="line">person;  &#x2F;&#x2F;&#123;age: 15, name: &quot;Amy&quot;&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>自定义的属性和拓展运算符对象里面属性的相同的时候：<strong>自定义的属性在拓展运算符后面，则拓展运算符对象内部同名的属性将被覆盖掉。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let person &#x3D; &#123;name: &quot;Amy&quot;, age: 15&#125;;</span><br><span class="line">let someone &#x3D; &#123; ...person, name: &quot;Mike&quot;, age: 17&#125;;</span><br><span class="line">someone;  &#x2F;&#x2F;&#123;name: &quot;Mike&quot;, age: 17&#125;</span><br></pre></td></tr></table></figure><p>自定义的属性在拓展运算度前面，则变成设置新对象默认属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let person &#x3D; &#123;name: &quot;Amy&quot;, age: 15&#125;;</span><br><span class="line">let someone &#x3D; &#123;name: &quot;Mike&quot;, age: 17, ...person&#125;;</span><br><span class="line">someone;  &#x2F;&#x2F;&#123;name: &quot;Amy&quot;, age: 15&#125;</span><br></pre></td></tr></table></figure><p>拓展运算符后面是空对象，没有任何效果也不会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; &#123;...&#123;&#125;, a: 1, b: 2&#125;;</span><br><span class="line">a;  &#x2F;&#x2F;&#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure><p>拓展运算符后面是null或者undefined，没有效果也不会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let b &#x3D; &#123;...null, ...undefined, a: 1, b: 2&#125;;</span><br><span class="line">b;  &#x2F;&#x2F;&#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fn(name,age&#x3D;17)&#123;</span><br><span class="line"> console.log(name+&quot;,&quot;+age);</span><br><span class="line">&#125;</span><br><span class="line">fn(&quot;Amy&quot;,18);  &#x2F;&#x2F; Amy,18</span><br><span class="line">fn(&quot;Amy&quot;,&quot;&quot;);  &#x2F;&#x2F; Amy,</span><br><span class="line">fn(&quot;Amy&quot;);     &#x2F;&#x2F; Amy,17</span><br></pre></td></tr></table></figure><h5 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f(...values)&#123;</span><br><span class="line">    console.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">f(1,2);      &#x2F;&#x2F;2</span><br><span class="line">f(1,2,3,4);  &#x2F;&#x2F;4</span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; v &#x3D;&gt; v;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">var f &#x3D; function(a)&#123;</span><br><span class="line"> return a;</span><br><span class="line">&#125;</span><br><span class="line">f(1);  &#x2F;&#x2F;1</span><br></pre></td></tr></table></figure><p>当箭头函数没有参数或者有多个参数，要用 () 括起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; (a,b) &#x3D;&gt; a+b;</span><br><span class="line">f(6,2);  &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure><p>当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; (a,b) &#x3D;&gt; &#123;</span><br><span class="line"> let result &#x3D; a+b;</span><br><span class="line"> return result;</span><br><span class="line">&#125;</span><br><span class="line">f(6,2);  &#x2F;&#x2F; 8</span><br></pre></td></tr></table></figure><p>当箭头函数要返回对象的时候，为了区分于代码块，要用 () 将对象包裹起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">var f &#x3D; (id,name) &#x3D;&gt; &#123;id: id, name: name&#125;;</span><br><span class="line">f(6,2);  &#x2F;&#x2F; SyntaxError: Unexpected token :</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 不报错</span><br><span class="line">var f &#x3D; (id,name) &#x3D;&gt; (&#123;id: id, name: name&#125;);</span><br><span class="line">f(6,2);  &#x2F;&#x2F; &#123;id: 6, name: 2&#125;</span><br></pre></td></tr></table></figure><p>==箭头函数里面没有 this 对象，此时的 this 是外层的 this 对象，即 Window。箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。== </p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>for…of 是 ES6 新引入的循环，用于替代 for..in 和 forEach() ，并且支持新的迭代协议。它可用于迭代常规的数据类型，如 Array 、 String 、 Map 和 Set 等等。    </p><p>区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const nums &#x3D; [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;];</span><br><span class="line">for (let num of nums) &#123;</span><br><span class="line">  console.log(num);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;zero one two</span><br><span class="line">for (let num in nums) &#123;</span><br><span class="line">  console.log(num);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 0 1 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-基础</title>
      <link href="/2019/08/01/Node-base/"/>
      <url>/2019/08/01/Node-base/</url>
      
        <content type="html"><![CDATA[<h1 id="认识-Node-js"><a href="#认识-Node-js" class="headerlink" title="认识 Node.js"></a>认识 Node.js</h1><ul><li>Node 是一个服务器端 JavaScript 解释器</li><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</li><li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效</li><li>Node.js 的包管理器 npm，是全球最大的开源库生态系统</li><li>Node.js 是一门动态语言，运行在服务端的 Javascript</li></ul><h1 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h1><ul><li>在命令窗口中输入 node -v 可以查看版本</li><li>0.x 完全不技术 ES6</li><li>4.x 部分支持 ES6 特性</li><li>5.x 部分支持ES6特性（比4.x多些），属于过渡产品，现在来说应该没有什么理由去用这个了</li><li>6.x 支持98%的 ES6 特性</li><li>8.x 支持 ES6 特性</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装文件</a></li><li>下载完后进行安装，建议安装到默认路径，注意不要有中文路径</li><li>配置环境变量</li><li>在命令窗口中输入 node -v，如果正常显示版本号则表示安装成功</li></ul><h1 id="REPL-交互式解释器"><a href="#REPL-交互式解释器" class="headerlink" title="REPL(交互式解释器)"></a>REPL(交互式解释器)</h1><p>在命令窗口输入 node 后回车，便可进入到 REPL 模式，在这个模式里可以输入 Javascript 的脚本语法，node 会自动将语法执行。类似于在浏览器的开发人员工具的控制台。不同的在于 REPL 是在服务端解析 Javascript，而控制台是在客户端解析 Javascript。按 CTRL + C 可退出 REPL 模式。</p><h1 id="运行-Node-js"><a href="#运行-Node-js" class="headerlink" title="运行 Node.js"></a>运行 Node.js</h1><p>REPL 只适用于一些简单的 Javascript 语法，对于稍复杂的程序，可以直接写到 js 文件当中。在前端可以直接在 html 页面中通过 script 标签引入 js 然后在浏览器运行，则可以通过浏览器来解析 js 文件。在 node 环境下，可通过命令窗口输入命令： node *.js ，便可直接执行 js 文件。</p><h1 id="Node-js-模块"><a href="#Node-js-模块" class="headerlink" title="Node.js 模块"></a>Node.js 模块</h1><p>模块系统是 Node.js 最基本也是最常用的。一般情况模块可分为四类：</p><ul><li>原生模块</li><li>文件模块</li><li>第三方模块</li><li>自定义模块</li></ul><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ol><li>创建模块(b.js)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴露方法 FunA</span></span><br><span class="line"><span class="built_in">module</span>.exports = FunA;</span><br></pre></td></tr></table></figure></li><li>加载模块(a.js)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> FunA = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);<span class="comment">//得到 b.js =&gt; FunA</span></span><br><span class="line"><span class="keyword">var</span> name = FunA();<span class="comment">// 运行 FunA，name = 'Tom'</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出结果</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>module.exports 就 Node.js 用于对外暴露，或者说对外开放指定访问权限的一个对象。如上面的案例，如果没有这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = FunA;</span><br></pre></td></tr></table></figure><p>那么 require(‘./b.js’) 就会为 undefined。<br>一个模块中有且仅有一个 module.exports，如果有多个那后面的则会覆盖前面的。</p><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p>exports 是 module 对象的一个属性，同时它也是一个对象。在很多时候一个 js 文件有多个需要暴露的方法或是对象，module.exports 又只能暴露一个，那这个时候就要用到 exports:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Sam'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.FunA = FunA;</span><br><span class="line">exports.FunB = FunB;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FunA = exports,exports 是一个对象</span></span><br><span class="line"><span class="keyword">var</span> FunA = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="keyword">var</span> name1 = FunA.FunA();<span class="comment">// 运行 FunA，name = 'Tom'</span></span><br><span class="line"><span class="keyword">var</span> name2 = FunA.FunB();<span class="comment">// 运行 FunB，name = 'Sam'</span></span><br><span class="line"><span class="built_in">console</span>.log(name1);</span><br><span class="line"><span class="built_in">console</span>.log(name2);</span><br></pre></td></tr></table></figure><p>当然在引入的时候也可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FunA = exports,exports 是一个对象</span></span><br><span class="line"><span class="keyword">var</span> &#123;FunA, FunB&#125; = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="keyword">var</span> name1 = FunA();<span class="comment">// 运行 FunA，name = 'Tom'</span></span><br><span class="line"><span class="keyword">var</span> name2 = FunB();<span class="comment">// 运行 FunB，name = 'Sam'</span></span><br><span class="line"><span class="built_in">console</span>.log(name1);</span><br><span class="line"><span class="built_in">console</span>.log(name2);</span><br></pre></td></tr></table></figure><h1 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h1><h3 id="什么是-npm-脚本"><a href="#什么是-npm-脚本" class="headerlink" title="什么是 npm 脚本"></a>什么是 npm 脚本</h3><p>npm 允许在package.json文件里面，使用scripts字段定义脚本命令。package.json 里面的scripts 字段是一个对象。它的每一个属性，对应一段脚本。定义在package.json里面的脚本，就称为 npm 脚本。</p><p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的npm run命令。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>npm run 脚本名称</li><li>如果是并行执行（即同时的平行执行），可以使用&amp;符号。<br>npm run script1.js &amp; npm run script2.js</li><li>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用&amp;&amp;符号。<br>npm run script1.js &amp;&amp; npm run script2.js</li></ul><h3 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h3><ul><li>npm start 即 npm run start</li><li>npm stop 即 npm run stop </li><li>npm test 即 npm run test</li><li>npm restart 即 npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start</li></ul><h1 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h1><h2 id="forever-介绍"><a href="#forever-介绍" class="headerlink" title="forever 介绍"></a>forever 介绍</h2><p>forever是一个简单的命令式nodejs的守护进程，能够启动，停止，重启App应用。forever完全基于命令行操作，在forever进程之下，创建node的子进程，通过monitor监控node子进程的运行情况，一旦文件更新，或者进程挂掉，forever会自动重启node服务器，确保应用正常运行。</p><h2 id="forever-安装"><a href="#forever-安装" class="headerlink" title="forever 安装"></a>forever 安装</h2><ul><li>全局安装forever npm install -g forever</li><li>查看forever帮助 forever -h</li></ul><h2 id="forever-命令行的中文解释"><a href="#forever-命令行的中文解释" class="headerlink" title="forever 命令行的中文解释"></a>forever 命令行的中文解释</h2><h3 id="子命令actions："><a href="#子命令actions：" class="headerlink" title="子命令actions："></a>子命令actions：</h3><pre><code>- start:启动守护进程- stop:停止守护进程- stopall:停止所有的forever进程- restart:重启守护进程- restartall:重启所有的foever进程- list:列表显示forever进程- config:列出所有的用户配置项- set &lt;key&gt; &lt;val&gt;: 设置用户配置项- clear &lt;key&gt;: 清楚用户配置项- logs: 列出所有forever进程的日志- logs &lt;script|index&gt;: 显示最新的日志- columns add &lt;col&gt;: 自定义指标到forever list- columns rm &lt;col&gt;: 删除forever list的指标- columns set&lt;cols&gt;: 设置所有的指标到forever list- cleanlogs: 删除所有的forever历史日志</code></pre><h3 id="forever-常用命令"><a href="#forever-常用命令" class="headerlink" title="forever 常用命令"></a>forever 常用命令</h3><ul><li>forever start app.js</li><li>forever stop app.js</li></ul><h3 id="配置参数options："><a href="#配置参数options：" class="headerlink" title="配置参数options："></a>配置参数options：</h3><pre><code>- -m MAX: 运行指定脚本的次数- -l LOGFILE: 输出日志到LOGFILE- -o OUTFILE: 输出控制台信息到OUTFILE- -e ERRFILE: 输出控制台错误在ERRFILE- -p PATH: 根目录- -c COMMAND: 执行命令，默认是node- -a, –append: 合并日志- -f, –fifo: 流式日志输出- -n, –number: 日志打印行数- –pidFile: pid文件- –sourceDir: 源代码目录- –minUptime: 最小spinn更新时间(ms)- –spinSleepTime: 两次spin间隔时间- –colors: 控制台输出着色- –plain: –no-colors的别名，控制台输出无色- -d, –debug: debug模式- -v, –verbose: 打印详细输出- -s, –silent: 不打印日志和错误信息- -w, –watch: 监控文件改变- –watchDirectory: 监控顶级目录- –watchIgnore: 通过模式匹配忽略监控- -h, –help: 命令行帮助信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack教程</title>
      <link href="/2019/07/10/Webpack/"/>
      <url>/2019/07/10/Webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="1-1-Webpack概念"><a href="#1-1-Webpack概念" class="headerlink" title="1.1 Webpack概念"></a>1.1 Webpack概念</h2><ul><li>定义：<strong>模块打包工具</strong></li><li>几种引入规范：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、ES Module 模块引入方式:</span><br><span class="line">import export(构造函数)</span><br><span class="line"></span><br><span class="line">2、CommonJS 模块引入规范：</span><br><span class="line">require（跟Node一样）</span><br><span class="line">module.exports</span><br><span class="line">3、CMD</span><br><span class="line">4、ADM</span><br></pre></td></tr></table></figure><h2 id="1-2-安装与使用"><a href="#1-2-安装与使用" class="headerlink" title="1.2 安装与使用"></a>1.2 安装与使用</h2><ol><li>安装：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init 项目名</span><br><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><ol><li>使用（生成main.js)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack index.js</span><br></pre></td></tr></table></figure><ul><li>注：npx会帮我们在项目目录中的node_modules查找webpack</li></ul><h2 id="1-3-webpack配置"><a href="#1-3-webpack配置" class="headerlink" title="1.3 webpack配置"></a>1.3 webpack配置</h2><ul><li>默认配置文件：webpack.config.js(需手动创建)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F;配置模式，默认是production（会压缩js），可以是development（就不会压缩）</span><br><span class="line">mode: &#39;production&#39;,</span><br><span class="line">&#x2F;&#x2F;entry表示文件打包的起点</span><br><span class="line">entry: &#39;.&#x2F;index.js&#39;,</span><br><span class="line">&#x2F;&#x2F;output表输出</span><br><span class="line">output: &#123;</span><br><span class="line">&#x2F;&#x2F;表示打包后放置的js文件</span><br><span class="line">filename: &#39;bundle.js&#39;,</span><br><span class="line">&#x2F;&#x2F;表示输出路径，要加绝对路径，所以引用path模块</span><br><span class="line">path: path.resolve(__dirname, &#39;bundle&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>entry的值如果是一个文件路径，默认其Chunk Names为main，其值可以是一个对象的形式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    main: &#39;.&#x2F;index.js&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以修改配置文件的名字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpackconfig.js</span><br><span class="line">webpackconfig是想要的配置名</span><br></pre></td></tr></table></figure><ul><li>配置完成后，以后直接npx webpack即可对模块进行打包。也可以修改package.json的文件，修改指令。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.json:</span><br><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">    &quot;自定义&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br><span class="line">npm run 自定义</span><br><span class="line">即可实现对模块进行打包(注意此处用npm即可)</span><br></pre></td></tr></table></figure><h2 id="1-4-配置打包其他文件（除js）"><a href="#1-4-配置打包其他文件（除js）" class="headerlink" title="1.4 配置打包其他文件（除js）"></a>1.4 配置打包其他文件（除js）</h2><ul><li>上边的webpack配置仅限于打包js文件，要配置打包其他类型的文件，用<strong>module</strong>配置。要安装<strong>file-loader</strong>或其他模块(vue-loader,url-loader)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">mode: &#39;production&#39;,</span><br><span class="line">entry: &#39;.&#x2F;index.js&#39;,</span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    &#x2F;&#x2F;正则式测试文件后缀</span><br><span class="line">    test: &#x2F;\.jpg$&#x2F;,</span><br><span class="line">    &#x2F;&#x2F;使用对应API处理</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        &#x2F;&#x2F;保证打包后图片名字不变</span><br><span class="line">        options:&#123;</span><br><span class="line">   &#x2F;&#x2F;还有其他占位符，例如[hash]</span><br><span class="line">            name: &#39;[name].[ext]&#39;,</span><br><span class="line">&#x2F;&#x2F;修改文件生成位置</span><br><span class="line">    outputPath: &#39;images&#x2F;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]  </span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: &#39;bundle.js&#39;,</span><br><span class="line">path: path.resolve(__dirname, &#39;bundle&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>url-loader也可以用来处理图片，处理后返回的是一段base64格式写在js中的代码。（适用于比较小的图片的打包），使用<strong>limit</strong>限制打包图片的大小。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: &#x2F;\.jpg|.png|.gif$&#x2F;,</span><br><span class="line">        use: &#123;</span><br><span class="line">            loader: &#39;url-loader&#39;</span><br><span class="line">            option: &#123;</span><br><span class="line">                name: &#39;[name].[ext]&#39;,</span><br><span class="line">                outputPath: &#39;images&#x2F;&#39;,</span><br><span class="line">                &#x2F;&#x2F;超过2kb的图片不会被打包</span><br><span class="line">                limit: 2048</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-样式打包"><a href="#1-5-样式打包" class="headerlink" title="1.5 样式打包"></a>1.5 样式打包</h2><ul><li>style-loader、css-loader、sass-loader和postcss-loder（css3自动添加厂商前缀，例如-webkit）。</li><li>至少要有style和css-loader，css-loader帮我们分析处理代码import各CSS模块间的关系，而style-loader则会将代码挂载到head中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">基本安装：</span><br><span class="line">npm install style-loader css-loader -D</span><br><span class="line"></span><br><span class="line">处理sass：</span><br><span class="line">npm install sass-loader node-sass -D</span><br><span class="line"></span><br><span class="line">处理css3（自动添加内核前缀）：</span><br><span class="line">npm install postcss-loader autoprefixer -D</span><br><span class="line">需要配置postcss.config.js:</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        require(&#39;autoprefixer&#39;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个loader使用时，是<strong>自下至上</strong>的，且use的值是一个数组。数据的item可以是各种loader或一个用于配置loader的对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">webpack.dev.js:</span><br><span class="line">(development开发模式下)</span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: &#x2F;\.scss$&#x2F;,</span><br><span class="line">    &#x2F;&#x2F;使用多个loader，use是个数组</span><br><span class="line">      use: [</span><br><span class="line">      &#x2F;&#x2F;从下到上依次处理</span><br><span class="line">        &#39;style-loader&#39;,</span><br><span class="line">        &#x2F;&#x2F;要配置loader时，改为对象</span><br><span class="line">        &#123;</span><br><span class="line">          loader: &#39;css-loader&#39;,</span><br><span class="line">    &#x2F;&#x2F;保证二级引入的css也得到处理</span><br><span class="line">          options: &#123;</span><br><span class="line">            importLoaders: 2，</span><br><span class="line">            &#x2F;&#x2F;让css有模块的概念</span><br><span class="line">            modules: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;sass-loader&#39;,</span><br><span class="line">        &#39;postcss-loader&#39;</span><br><span class="line">      ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      test: &#x2F;\.css$&#x2F;,</span><br><span class="line">      use: [&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;pstcss-loader&#39;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack.prod.js:</span><br><span class="line">(上线打包时)</span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: &#x2F;\.scss$&#x2F;,</span><br><span class="line">    use: [</span><br><span class="line">      &#x2F;&#x2F;注意：此处替代了style-loader</span><br><span class="line">      &#x2F;&#x2F;使得上线时CSS单独打包成独立文件</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: &#39;css-loader&#39;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            importLoaders: 2，</span><br><span class="line">            modules: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;sass-loader&#39;,</span><br><span class="line">        &#39;postcss-loader&#39;</span><br><span class="line">      ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">    test: &#x2F;\.css$&#x2F;,</span><br><span class="line">    use: [</span><br><span class="line">      MiniCssExtractPlugin.loader,</span><br><span class="line">      &#39;css-loader&#39;,</span><br><span class="line">      &#39;pstcss-loader&#39;</span><br><span class="line">      ]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">&#x2F;&#x2F;对css文件进行压缩</span><br><span class="line">    minimizer: [new OptimizeCSSAssetsPlugin(&#123;&#125;)]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">&#x2F;&#x2F;引入和配置css处理插件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename: &#39;[name].css&#39;,</span><br><span class="line">        chunkFilename: &#39;[name].chunk.css&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: &#39;[name].[contenthash].js&#39;,</span><br><span class="line">    chunkFilename: &#39;[name].[contenthash].js&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字体文件（iconfont）用file-loader处理即可。</li></ul><h1 id="使用plugins（插件）便捷打包"><a href="#使用plugins（插件）便捷打包" class="headerlink" title="使用plugins（插件）便捷打包"></a>使用plugins（插件）便捷打包</h1><h2 id="2-1-html-webpack-plugin"><a href="#2-1-html-webpack-plugin" class="headerlink" title="2.1 html-webpack-plugin"></a>2.1 html-webpack-plugin</h2><ul><li>首先安装<strong>html-webpack-plugin</strong>，配置如下（载入并实例化），会使得npx webpack打包其他模块的同时，<strong>生成一个html页面（且自动引入js文件）</strong>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js:</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;实例化的同时，配置html</span><br><span class="line">    plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: &#39;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：可以在webpack运行到某个时刻的时候，帮你完成一些事（类似Vue中生命周期钩子）</li></ul><h2 id="2-2-clear-webpack-plugin（重建时，清空dist）"><a href="#2-2-clear-webpack-plugin（重建时，清空dist）" class="headerlink" title="2.2 clear-webpack-plugin（重建时，清空dist）"></a>2.2 clear-webpack-plugin（重建时，清空dist）</h2><ul><li>安装：clean-webpack-plugin -D</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &#39;src&#x2F;index.html&#39;</span><br><span class="line">&#125;), new CleanWebpackPlugin([&#39;dist&#39;])]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote><p><a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/</a></p></blockquote><h2 id="3-1-Entry与Output的基础配置"><a href="#3-1-Entry与Output的基础配置" class="headerlink" title="3.1 Entry与Output的基础配置"></a>3.1 Entry与Output的基础配置</h2><ul><li>打包多个js，entry和output配置。</li><li>entry的值改为对象，键为文件名，值为相对路径下要打包的js。</li><li>output配置：filename的值利用占位符[name]，publicPath为传输地址。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">        other: &#39;.&#x2F;src&#x2F;abc.js&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">    &#x2F;&#x2F;配置传输地址(默认同级目录)</span><br><span class="line">        publicPath: &#39;http:&#x2F;&#x2F;cdn.com.cn&#39;</span><br><span class="line">    &#x2F;&#x2F;用占位符生成entry对应键名的js文件</span><br><span class="line">        filename: &#39;[name].js&#39;</span><br><span class="line">        path: path.resolve(__dirname,&#39;dist&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-SourceMap"><a href="#3-2-SourceMap" class="headerlink" title="3.2 SourceMap"></a>3.2 SourceMap</h2><blockquote><p><a href="https://www.webpackjs.com/configuration/devtool/" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/devtool/</a></p></blockquote><ul><li>作用：用于与生成的js形成映射关系，也就是能让页面告知是<strong>哪个具体的js文件哪行出错</strong>，而非直接告诉打包后的js文件哪行出错。</li><li>配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devtool: </span><br><span class="line">&#39;source-map&#39;:会生成一个map文件</span><br><span class="line">或&#39;inline-source-map&#39;:将map内容写入main.js中</span><br><span class="line">或&#39;cheap-source-map&#39;:跟第二个类似，不过它错误定位精确度比较低点，但速度是前三者最快的。</span><br><span class="line">或&#39;eval&#39;:最快的，但错误提示内容比较少。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上线(production)使用：&#39;cheap-module-source-map&#39;:模块出错也会管理。</span><br><span class="line">开发(development）过程：&#39;cheap-module-eval-source-map&#39;</span><br></pre></td></tr></table></figure><h2 id="3-3-WebpackDevServer"><a href="#3-3-WebpackDevServer" class="headerlink" title="3.3 WebpackDevServer"></a>3.3 WebpackDevServer</h2><blockquote><p><a href="https://www.webpackjs.com/configuration/dev-server/" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/dev-server/</a></p></blockquote><ul><li>类似nodemon，当相关文件改变时，自动重新打包。利用webpack –watch</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.json:</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;watch&quot;: &quot;webpack --watch&quot;</span><br><span class="line">&#125;</span><br><span class="line">运行：</span><br><span class="line">npm run watch即可</span><br></pre></td></tr></table></figure><ul><li>使用devServer后打包的文件不会生成dist目录，而是放到内存中</li><li>devServer配置服务器（放置文件、是否自动打开和端口号）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; 服务器</span><br><span class="line">devServer: &#123;</span><br><span class="line">&#x2F;&#x2F;当访问api时会自动转到端口号3000的服务器上</span><br><span class="line">proxy: &#123;</span><br><span class="line">&#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;指定好服务器js文件放置位置</span><br><span class="line">contentBase: path.join(__dirname, &#39;dist&#39;),</span><br><span class="line">&#x2F;&#x2F;自动帮你打开浏览器和主页</span><br><span class="line">open: true,</span><br><span class="line">port: 8080</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">package.json:</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">&#125;</span><br><span class="line">运行：</span><br><span class="line">npm run start</span><br><span class="line">或npx webpack-dev-server</span><br></pre></td></tr></table></figure><ul><li>proxy配置项详细：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">&#x2F;&#x2F;代理请求转发</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">            target: &#39;http:...&#39;,</span><br><span class="line">            &#x2F;&#x2F;true时只对https生效</span><br><span class="line">            secure: false,</span><br><span class="line">            &#x2F;&#x2F;能转换拿到demo.json</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &#39;header.json&#39;: &#39;demo.json&#39;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;拦截</span><br><span class="line">    bypass: function(),</span><br><span class="line">    &#x2F;&#x2F;使得可以跨域访问</span><br><span class="line">    changeOrgin: true,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        host: &#39;www.xx.com&#39;,</span><br><span class="line">        cookie:  &#39;xxxx&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-Node-Js-API"><a href="#3-4-Node-Js-API" class="headerlink" title="3.4 Node.Js API"></a>3.4 Node.Js API</h2><blockquote><p><a href="https://www.webpackjs.com/api/node/" target="_blank" rel="noopener">https://www.webpackjs.com/api/node/</a></p></blockquote><ul><li>node.js实现启动服务器时自动webpack打包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server.js:</span><br><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const webpackDevMiddleware &#x3D; require(&#39;webpack-dev-middleware&#39;);</span><br><span class="line">const config &#x3D; require(&#39;.&#x2F;webpack.config.js&#39;);</span><br><span class="line">&#x2F;&#x2F;生成编译器，能自动执行打包</span><br><span class="line">const complier &#x3D; webpack(config);</span><br><span class="line"></span><br><span class="line">const app &#x3D; express();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用中间件webpackDevMiddleware</span><br><span class="line">app.use(webpackDevMiddleware(complier, &#123;</span><br><span class="line">  publicPath: config.output.publicPath</span><br><span class="line">&#125;))</span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;Server is running&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">运行：</span><br><span class="line">node server.js</span><br></pre></td></tr></table></figure><h2 id="3-5-Hot-Module-Replacement（模块热替换）"><a href="#3-5-Hot-Module-Replacement（模块热替换）" class="headerlink" title="3.5 Hot Module Replacement（模块热替换）"></a>3.5 Hot Module Replacement（模块热替换）</h2><blockquote><p><a href="https://www.webpackjs.com/api/hot-module-replacement/" target="_blank" rel="noopener">https://www.webpackjs.com/api/hot-module-replacement/</a></p></blockquote><ul><li>HMR：改变样式时，页面不会重新加载（导致动态添加节点小时），但样式能动态改变。方便调试样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需要用到webpack</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">proxy: &#123;</span><br><span class="line">&#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class="line">&#125;,</span><br><span class="line">contentBase: path.join(__dirname, &#39;dist&#39;),</span><br><span class="line">open: true,</span><br><span class="line">port: 8080,</span><br><span class="line">&#x2F;&#x2F;让页面保持缓存状态</span><br><span class="line">hot: true，</span><br><span class="line">hotOnly: true</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: &#39;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    &#x2F;&#x2F;配置使用该插件</span><br><span class="line">    new webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有两个以上实例要发生变动时，利用module.hot使实例间互不影响。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Counter();</span><br><span class="line">Number();</span><br><span class="line"></span><br><span class="line">if(module.hot) &#123;</span><br><span class="line">&#x2F;&#x2F;利用accept方法</span><br><span class="line">  module.hot.accept(&#39;.&#x2F;number.js&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    let temp &#x3D; document.getElementById(&#39;number&#39;)</span><br><span class="line">    temp.remove()</span><br><span class="line">    Number();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-Babel处理ES6语法"><a href="#3-6-Babel处理ES6语法" class="headerlink" title="3.6 Babel处理ES6语法"></a>3.6 Babel处理ES6语法</h2><blockquote><p><a href="https://babeljs.io/setup#installation" target="_blank" rel="noopener">https://babeljs.io/setup#installation</a></p></blockquote><ul><li>目的：将ES6的语法转化为ES5，利用babel-loader处理js文件，配置.babelrc文件处理ES6的新增方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.babelrc(写业务代码时用parsets配置):</span><br><span class="line">&#123;  </span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [</span><br><span class="line">&quot;@babel&#x2F;preset-env&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">&quot;targets&quot;: &#123;</span><br><span class="line">&quot;chrome&quot;: &quot;58&quot;,</span><br><span class="line">&quot;ie&quot;: &quot;6&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">&quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">&quot;corejs&quot;: &#123; &quot;version&quot;: 3, &quot;proposals&quot;: true&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">.babelrc(写内库时，避免全局污染，用plugins)：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel&#x2F;plugin-transform-runtime&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;absoluteRuntime&quot;: false,</span><br><span class="line">        &quot;corejs&quot;: 3,</span><br><span class="line">        &quot;helpers&quot;: true,</span><br><span class="line">        &quot;regenerator&quot;: true,</span><br><span class="line">        &quot;useESModules&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>babel-loader安装与配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">npm install --save-dev babel-loader @babel&#x2F;core</span><br><span class="line">起建立通信作用</span><br><span class="line">npm install @babel&#x2F;preset-env --save-dev</span><br><span class="line">起转化作用</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [&#123; </span><br><span class="line">    test: &#x2F;\.js$&#x2F;,</span><br><span class="line">    exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">    loader: &quot;babel-loader&quot;</span><br><span class="line">    &#x2F;&#x2F;配置preset</span><br><span class="line">    options: &#123;</span><br><span class="line">        preset: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>bebal-loader和babal/present-env只能转化部分语法，<strong>ES6的新方法则不行。还需要使用@babel/polyfill</strong>。</li><li>@babel/polyfill在7.4.0中已弃用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;babeljs.io&#x2F;docs&#x2F;en&#x2F;babel-polyfill</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">npm install --save @babel&#x2F;polyfill</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">&#123;</span><br><span class="line">test: &#x2F;\.js$&#x2F;,</span><br><span class="line">exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">loader: &#39;babel-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">presets: [</span><br><span class="line">[</span><br><span class="line">    &#39;@babel&#x2F;preset-env&#39;, </span><br><span class="line">    &#123;</span><br><span class="line">    &#x2F;&#x2F;只打包用到的部分</span><br><span class="line">    useBuiltIns: &#39;usage&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用(新版本已弃用)：</span><br><span class="line">import &quot;@babel&#x2F;polyfill&quot;;</span><br><span class="line">或require(&quot;@babel&#x2F;polyfill&quot;);</span><br></pre></td></tr></table></figure><ul><li>配置presets使用core-js（写业务代码时，<strong>平时项目使用</strong>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">npm install core-js@3 --save</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">test: &#x2F;\.js$&#x2F;,</span><br><span class="line">exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">loader: &#39;babel-loader&#39;,</span><br><span class="line">options: &#123;</span><br><span class="line">presets: [</span><br><span class="line">[</span><br><span class="line">&#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">&#123;   </span><br><span class="line">&#x2F;&#x2F; 控制最低浏览器版本号</span><br><span class="line">    &#123;</span><br><span class="line">&#39;targets&#39;: &#123;</span><br><span class="line">&#39;chrome&#39;: &#39;58&#39;,</span><br><span class="line">&#39;ie&#39;: &#39;6&#39;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 配置对有需要的代码进行转换</span><br><span class="line">useBuiltIns:&#39;usage&#39;,</span><br><span class="line">corejs: &#123; version: 3, proposals: true &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@babel/plugin-transform-runtime（写内库时，防止全局污染）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;babeljs.io&#x2F;docs&#x2F;en&#x2F;babel-plugin-transform-runtime</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">npm install --save-dev @babel&#x2F;plugin-transform-runtime</span><br><span class="line">npm install --save @babel&#x2F;runtime</span><br><span class="line">npm install --save @babel&#x2F;runtime-corejs3</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">options: &#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel&#x2F;plugin-transform-runtime&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;absoluteRuntime&quot;: false,</span><br><span class="line">        &quot;corejs&quot;: 3,</span><br><span class="line">        &quot;helpers&quot;: true,</span><br><span class="line">        &quot;regenerator&quot;: true,</span><br><span class="line">        &quot;useESModules&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以把配置写成一个文件名为“.babelrc”的文件。这样就可以把option去除掉。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">        &#123;</span><br><span class="line">test: &#x2F;\.js$&#x2F;,</span><br><span class="line">exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">loader: &#39;babel-loader&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node知识点</title>
      <link href="/2019/07/05/Node/"/>
      <url>/2019/07/05/Node/</url>
      
        <content type="html"><![CDATA[<h3 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure><h3 id="下划线-变量"><a href="#下划线-变量" class="headerlink" title="下划线(_)变量"></a>下划线(_)变量</h3><p>你可以使用下划线(_)获取上一个表达式的运算结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; <span class="keyword">var</span> y = <span class="number">20</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; x + y</span><br><span class="line"><span class="number">30</span></span><br><span class="line">&gt; <span class="keyword">var</span> sum = _</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js </span><br><span class="line">菜鸟教程官网地址：www.runoob.com </span><br><span class="line">程序执行结束!</span><br></pre></td></tr></table></figure><h3 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h3><p>在 Node 应用程序中，执行异步操作的函数将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js </span><br><span class="line">程序执行结束! </span><br><span class="line">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure><p>第一个实例在文件读取完后才执行程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p><p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p><h3 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter(); </span><br><span class="line"><span class="comment">// 创建事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line">   <span class="comment">// 触发 data_received 事件 </span></span><br><span class="line">   eventEmitter.emit(<span class="string">'data_received'</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler);</span><br><span class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 触发 connection 事件 </span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</span><br></pre></td></tr></table></figure><p>接下来让我们执行以上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js </span><br><span class="line">连接成功。 </span><br><span class="line">数据接收成功。 </span><br><span class="line">程序执行完毕。</span><br></pre></td></tr></table></figure><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，如下我们创建一个 <strong>main.js</strong> 文件，代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>); </span><br><span class="line">hello.world();</span><br></pre></td></tr></table></figure><p>以上实例中，代码 require(‘./hello’) 引入了当前目录下的 hello.js 文件（./ 为当前目录，node.js 默认后缀为 js）。</p><p>Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。</p><p>接下来我们就来创建 hello.js 文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.world = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require(‘./hello’) 加载这个模块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。</p><p>有时候我们只是想把一个对象封装到模块中，格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.js </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> name; </span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123; </span><br><span class="line">        name = thyName; </span><br><span class="line">    &#125;; </span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br></pre></td></tr></table></figure><p>这样就可以直接获得这个对象了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js </span></span><br><span class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>); </span><br><span class="line">hello = <span class="keyword">new</span> Hello(); </span><br><span class="line">hello.setName(<span class="string">'BYVoid'</span>); </span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></table></figure><p>模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的 exports。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue教程</title>
      <link href="/2019/05/10/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/05/10/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h3 id="Vue-js-是什么"><a href="#Vue-js-是什么" class="headerlink" title="Vue.js 是什么"></a>Vue.js 是什么</h3><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="直接用引入"><a href="#直接用引入" class="headerlink" title="直接用引入"></a>直接用<script>引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue</span></span><br></pre></td></tr></table></figure><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数据和方法"><a href="#数据和方法" class="headerlink" title="数据和方法"></a>数据和方法</h4><p>当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的 property 加入到 Vue 的<strong>响应式系统</strong>中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。值得注意的是只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = <span class="number">2</span>  </span><br><span class="line">data.a <span class="comment">//  响应式  =&gt; 2</span></span><br><span class="line">vm.b = <span class="string">'hi'</span> <span class="comment">//实例创建时不存在，不能响应式</span></span><br></pre></td></tr></table></figure><h4 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h4><p><strong>所有的生命周期钩子自动绑定this 上下文到vue实例中</strong>，因此你可以访问数据，对 property 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</p><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h5><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><p>实例被挂载后调用，这时 el 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 <code>vm.$el</code> 也在文档内。</p><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h5><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。  </p><p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></p><h5 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h5><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h5><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 <code>v-html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 <code>span</code> 的内容将会被替换成为 property 值 <code>rawHtml</code></p><h5 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h5><p>每个绑定都只能包含<strong>单个表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">&lt;div v-bind:id=<span class="string">"'list-' + id"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>在元素 和 template 中使用 v-if 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈，打字辛苦啊！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    seen: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    ok: <span class="literal">true</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><p>可以用 v-else 指令给 v-if 添加一个 "else" 块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span></span><br><span class="line">      Sorry</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      Not sorry</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>v-for 指令需要以 <strong>site in sites</strong> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p>事件监听可以使用 v-on 指令，简写<code>@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>属性绑定可以用v-bind指令，简写<code>：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgsrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[errorClass ,isActive ? activeClass : '']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>v-model 指令在表单控件元素上创建双向数据绑定。</p><p>当使用的数据因为还未赋值导致出现未定义报错时，可以在外层用v-if判断该数据是否为true，解决报错。</p><p>循环渲染数据时，若存在不需每条数据都显示，可使用v-if判断index决定是否渲染。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js知识点</title>
      <link href="/2019/05/08/JS/"/>
      <url>/2019/05/08/JS/</url>
      
        <content type="html"><![CDATA[<h3 id="直接写入-HTML-输出流"><a href="#直接写入-HTML-输出流" class="headerlink" title="直接写入 HTML 输出流"></a>直接写入 HTML 输出流</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;&lt;h1&gt;这是一个标题&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;p&gt;这是一个段落。&lt;&#x2F;p&gt;&quot;);</span><br></pre></td></tr></table></figure><p>只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。</p><h3 id="改变-HTML-内容"><a href="#改变-HTML-内容" class="headerlink" title="改变 HTML 内容"></a>改变 HTML 内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x&#x3D;document.getElementById(&quot;demo&quot;);  &#x2F;&#x2F;查找元素</span><br><span class="line">x.innerHTML&#x3D;&quot;Hello JavaScript&quot;;    &#x2F;&#x2F;改变内容</span><br></pre></td></tr></table></figure><p>修改自身元素的内容 (使用 this.innerHTML)</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>数字（Number）字面量 可以是整数或者是小数，或者是科学计数(e)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.14</span><br><span class="line">1001</span><br><span class="line">123e5</span><br></pre></td></tr></table></figure><p>字符串（String）字面量 可以使用单引号或双引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;John Doe&quot;</span><br><span class="line">&#39;John Doe&#39;</span><br></pre></td></tr></table></figure><p>表达式字面量 用于计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 + 6</span><br><span class="line">5 * 10</span><br></pre></td></tr></table></figure><p>数组（Array）字面量 定义一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[40, 100, 1, 5, 25, 10]</span><br></pre></td></tr></table></figure><p>对象（Object）字面量 定义一个对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</span><br></pre></td></tr></table></figure><p>函数（Function）字面量 定义一个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123; return a * b;&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值。<br>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;我们使用 var 关键词来声明变量，变量声明之后，该变量是空的（它没有值）。</span><br><span class="line">var x, length</span><br><span class="line">&#x2F;&#x2F;如需向变量赋值，请使用等号：</span><br><span class="line">x &#x3D; 5</span><br><span class="line">length &#x3D; 6</span><br></pre></td></tr></table></figure><h3 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h3><p>可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;你好 \</span><br><span class="line">世界!&quot;);</span><br></pre></td></tr></table></figure><p>不过，您不能像这样折行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write \</span><br><span class="line">(&quot;你好世界!&quot;);</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol（表示独一无二的值）。<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)。<br>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x;               &#x2F;&#x2F; x 为 undefined</span><br><span class="line">var x &#x3D; 5;           &#x2F;&#x2F; 现在 x 为数字</span><br><span class="line">var x &#x3D; &quot;John&quot;;      &#x2F;&#x2F; 现在 x 为字符串</span><br></pre></td></tr></table></figure><h3 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h3><p>JavaScript 变量的生命期从它们被声明的时间开始。<br>局部变量会在函数运行以后被删除。<br>全局变量会在页面关闭后被删除。</p><h3 id="重新声明-JavaScript-变量"><a href="#重新声明-JavaScript-变量" class="headerlink" title="重新声明 JavaScript 变量"></a>重新声明 JavaScript 变量</h3><p>如果重新声明 JavaScript 变量，该变量的值不会丢失：<br>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var carname&#x3D;&quot;Volvo&quot;;</span><br><span class="line">var carname;</span><br></pre></td></tr></table></figure><h3 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h3><p>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。<br>这条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carname&#x3D;&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure><p>将声明 window 的一个属性 carname。<br>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var var1 &#x3D; 1; &#x2F;&#x2F; 不可配置全局属性</span><br><span class="line">var2 &#x3D; 2; &#x2F;&#x2F; 没有使用 var 声明，可配置全局属性</span><br><span class="line"></span><br><span class="line">console.log(this.var1); &#x2F;&#x2F; 1</span><br><span class="line">console.log(window.var1); &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">delete var1; &#x2F;&#x2F; false 无法删除</span><br><span class="line">console.log(var1); &#x2F;&#x2F;1</span><br><span class="line"></span><br><span class="line">delete var2; </span><br><span class="line">console.log(delete var2); &#x2F;&#x2F; true</span><br><span class="line">console.log(var2); &#x2F;&#x2F; 已经删除 报错变量未定义</span><br></pre></td></tr></table></figure><h3 id="字符串可以是对象"><a href="#字符串可以是对象" class="headerlink" title="字符串可以是对象"></a>字符串可以是对象</h3><p>通常， JavaScript 字符串是原始值，可以使用字符创建： var firstName = “John”<br>但我们也可以使用 new 关键字将字符串定义为一个对象： var firstName = new String(“John”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; &quot;John&quot;;</span><br><span class="line">var y &#x3D; new String(&quot;John&quot;);</span><br><span class="line">typeof x &#x2F;&#x2F; 返回 String</span><br><span class="line">typeof y &#x2F;&#x2F; 返回 Object</span><br><span class="line">(x &#x3D;&#x3D;&#x3D; y) &#x2F;&#x2F; 结果为 false，因为 x 是字符串，y 是对象</span><br></pre></td></tr></table></figure><p>如果把数字与字符串相加，结果将成为字符串！</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h5><p>当前函数的调用者传入的所有参数。</p><h5 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h5><p>获得额外的<code>rest</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 结果:</span></span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// Array [ 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>continue 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）。<br>continue 语句中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 该例子跳过了值 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (i&#x3D;0;i&lt;&#x3D;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i&#x3D;&#x3D;3) continue;</span><br><span class="line">    x&#x3D;x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><p>你可以使用 typeof 操作符来检测变量的数据类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof &quot;John&quot;                &#x2F;&#x2F; 返回 string</span><br><span class="line">typeof 3.14                  &#x2F;&#x2F; 返回 number</span><br><span class="line">typeof false                 &#x2F;&#x2F; 返回 boolean</span><br><span class="line">typeof [1,2,3,4]             &#x2F;&#x2F; 返回 object</span><br><span class="line">typeof &#123;name:&#39;John&#39;, age:34&#125; &#x2F;&#x2F; 返回 object</span><br></pre></td></tr></table></figure><ul><li>NaN 的数据类型是数值</li><li>数组的数据类型是对象</li><li>日期的数据类型是对象</li><li>null 的数据类型是对象</li><li>未定义变量的数据类型是 undefined</li><li>尚未赋值的变量的数据类型也是 undefined<br>您无法使用 typeof 去判断 JavaScript 对象是否是数组（或日期）。<h3 id="null-amp-undefined"><a href="#null-amp-undefined" class="headerlink" title="null&amp;undefined"></a>null&amp;undefined</h3>在 JavaScript 中 null 表示 “什么都没有”。<br>null是一个只有一个值的特殊类型。表示一个空对象引用。<br>在 JavaScript 中, undefined 是一个没有设置值的变量。<br>typeof 一个没有值的变量会返回 undefined。<br>用 typeof 检测 null 返回是object。<br>你可以设置为 null 来清空对象：值为 null(空), 但类型为对象<br>你可以设置为 undefined 来清空对象：值为 undefined, 类型为 undefined<br>null 和 undefined 的值相等，但类型不等：   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined             &#x2F;&#x2F; undefined</span><br><span class="line">typeof null                  &#x2F;&#x2F; object</span><br><span class="line">null &#x3D;&#x3D;&#x3D; undefined           &#x2F;&#x2F; false</span><br><span class="line">null &#x3D;&#x3D; undefined            &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>constructor 属性返回所有 JavaScript 变量的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;John&quot;.constructor                 &#x2F;&#x2F; 返回函数 String()  &#123; [native code] &#125;</span><br><span class="line">(3.14).constructor                 &#x2F;&#x2F; 返回函数 Number()  &#123; [native code] &#125;</span><br><span class="line">false.constructor                  &#x2F;&#x2F; 返回函数 Boolean() &#123; [native code] &#125;</span><br><span class="line">[1,2,3,4].constructor              &#x2F;&#x2F; 返回函数 Array()   &#123; [native code] &#125;</span><br><span class="line">&#123;name:&#39;John&#39;, age:34&#125;.constructor  &#x2F;&#x2F; 返回函数 Object()  &#123; [native code] &#125;</span><br><span class="line">new Date().constructor             &#x2F;&#x2F; 返回函数 Date()    &#123; [native code] &#125;</span><br><span class="line">function () &#123;&#125;.constructor         &#x2F;&#x2F; 返回函数 Function()&#123; [native code] &#125;</span><br></pre></td></tr></table></figure><p>你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isArray(myArray) &#123;</span><br><span class="line">    return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isDate(myDate) &#123;</span><br><span class="line">    return myDate.constructor.toString().indexOf(&quot;Date&quot;) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-变量提升"><a href="#JavaScript-变量提升" class="headerlink" title="JavaScript 变量提升"></a>JavaScript 变量提升</h3><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。<br>变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。   </p><h3 id="JavaScript-初始化不会提升"><a href="#JavaScript-初始化不会提升" class="headerlink" title="JavaScript 初始化不会提升"></a>JavaScript 初始化不会提升</h3><p>JavaScript 只有声明的变量会提升，初始化的不会。<br>以下两个实例结果结果不相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 5; &#x2F;&#x2F; 初始化 x</span><br><span class="line">var y &#x3D; 7; &#x2F;&#x2F; 初始化 y</span><br><span class="line">elem &#x3D; document.getElementById(&quot;demo&quot;); &#x2F;&#x2F; 查找元素</span><br><span class="line">elem.innerHTML &#x3D; x + &quot; &quot; + y;           &#x2F;&#x2F; 显示 x 和 y</span><br><span class="line"></span><br><span class="line">var x &#x3D; 5; &#x2F;&#x2F; 初始化 x</span><br><span class="line">elem &#x3D; document.getElementById(&quot;demo&quot;); &#x2F;&#x2F; 查找元素</span><br><span class="line">elem.innerHTML &#x3D; x + &quot; &quot; + y;           &#x2F;&#x2F; 显示 x 和 y</span><br><span class="line">var y &#x3D; 7; &#x2F;&#x2F; 初始化 y</span><br></pre></td></tr></table></figure><p>实例 2 的 y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y = 7) 并不会提升，所以 y 变量是一个未定义的变量。<br>实例 2 类似以下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 5; &#x2F;&#x2F; 初始化 x</span><br><span class="line">var y;     &#x2F;&#x2F; 声明 y</span><br><span class="line">elem &#x3D; document.getElementById(&quot;demo&quot;); &#x2F;&#x2F; 查找元素</span><br><span class="line">elem.innerHTML &#x3D; x + &quot; &quot; + y;           &#x2F;&#x2F; 显示 x 和 y</span><br><span class="line">y &#x3D; 7;    &#x2F;&#x2F; 设置 y 为 7</span><br></pre></td></tr></table></figure><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><h5 id="数组排序-1"><a href="#数组排序-1" class="headerlink" title="数组排序"></a>数组排序</h5><p>sort() 方法是最强大的数组方法之一。<br>sort() 方法以字母顺序对数组进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.sort();            &#x2F;&#x2F; 对 fruits 中的元素进行排序</span><br></pre></td></tr></table></figure><h5 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h5><p>reverse() 方法反转数组中的元素。<br>您可以使用它以降序对数组进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.sort();            &#x2F;&#x2F; 对 fruits 中的元素进行排序</span><br><span class="line">fruits.reverse();         &#x2F;&#x2F; 反转元素顺序</span><br></pre></td></tr></table></figure><h5 id="数字排序"><a href="#数字排序" class="headerlink" title="数字排序"></a>数字排序</h5><p>默认地，sort() 函数按照字符串顺序对值进行排序。<br>该函数很适合字符串（”Apple” 会排在 “Banana” 之前）。<br>不过，如果数字按照字符串来排序，则 “25” 大于 “100”，因为 “2” 大于 “1”。<br>正因如此，sort() 方法在对数值排序时会产生不正确的结果。<br>我们通过一个比值函数来修正此问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class="line">points.sort(function(a, b)&#123;return a - b&#125;);</span><br></pre></td></tr></table></figure><h5 id="比值函数"><a href="#比值函数" class="headerlink" title="比值函数"></a>比值函数</h5><p>比较函数的目的是定义另一种排序顺序。<br>比较函数应该返回一个负，零或正值，这取决于参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(a, b)&#123;return a-b&#125;</span><br></pre></td></tr></table></figure><p>当 sort() 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序。</p><h5 id="以随机顺序排序数组"><a href="#以随机顺序排序数组" class="headerlink" title="以随机顺序排序数组"></a>以随机顺序排序数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class="line">points.sort(function(a, b)&#123;return 0.5 - Math.random()&#125;);</span><br></pre></td></tr></table></figure><h5 id="查找最高（或最低）的数组值"><a href="#查找最高（或最低）的数组值" class="headerlink" title="查找最高（或最低）的数组值"></a>查找最高（或最低）的数组值</h5><p>JavaScript 不提供查找数组中最大或最小数组值的内建函数。<br>不过，在对数组进行排序之后，您能够使用索引来获得最高或最低值。<br>升序排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class="line">points.sort(function(a, b)&#123;return a - b&#125;);</span><br><span class="line">&#x2F;&#x2F; 现在 points[0] 包含最低值</span><br><span class="line">&#x2F;&#x2F; 而 points[points.length-1] 包含最高值</span><br></pre></td></tr></table></figure><p>降序排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class="line">points.sort(function(a, b)&#123;return b - a&#125;);</span><br><span class="line">&#x2F;&#x2F; 现在 points[0] 包含最高值</span><br><span class="line">&#x2F;&#x2F; 而 points[points.length-1] 包含最低值</span><br></pre></td></tr></table></figure><h5 id="对数组使用-Math-max"><a href="#对数组使用-Math-max" class="headerlink" title="对数组使用 Math.max()"></a>对数组使用 Math.max()</h5><p>您可以使用 Math.max.apply 来查找数组中的最高值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myArrayMax(arr) &#123;</span><br><span class="line">    return Math.max.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Math.max.apply([1, 2, 3]) 等于 Math.max(1, 2, 3)。</p><h5 id="对数组使用-Math-min"><a href="#对数组使用-Math-min" class="headerlink" title="对数组使用 Math.min()"></a>对数组使用 Math.min()</h5><p>您可以使用 Math.min.apply 来查找数组中的最低值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myArrayMin(arr) &#123;</span><br><span class="line">    return Math.min.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p>Math.random() 返回 0（包括） 至 1（不包括） 之间的随机数。<br>Math.random() 与 Math.floor() 一起使用用于返回随机整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(Math.random() * 10);&#x2F;&#x2F; 返回 0 至 9 之间的数</span><br></pre></td></tr></table></figure><h5 id="一个适当的随机函数"><a href="#一个适当的随机函数" class="headerlink" title="一个适当的随机函数"></a>一个适当的随机函数</h5><p>这个 JavaScript 函数始终返回介于 min（包括）和 max（不包括）之间的随机数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function getRndInteger(min, max) &#123;</span><br><span class="line">    return Math.floor(Math.random() * (max - min) ) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 JavaScript 函数始终返回介于 min 和 max（都包括）之间的随机数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function getRndInteger(min, max) &#123;</span><br><span class="line">    return Math.floor(Math.random() * (max - min + 1) ) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“use-strict”-指令"><a href="#“use-strict”-指令" class="headerlink" title="“use strict” 指令"></a>“use strict” 指令</h3><p>“use strict”; 的作用是指示 JavaScript 代码应该以“严格模式”执行。</p><h5 id="为什么使用严格模式？"><a href="#为什么使用严格模式？" class="headerlink" title="为什么使用严格模式？"></a>为什么使用严格模式？</h5><p>严格模式使我们更容易编写“安全的” JavaScript。<br>严格模式把之前可接受的“坏语法”转变为真实的错误。<br>举例来说，在普通的 JavaScript 中，错打变量名会创建新的全局变量。在严格模式中，此举将抛出错误，这样就不可能意外创建全局变量。<br>在普通 JavaScript 中，如果向不可写属性赋值，开发者不会得到任何错误反馈。<br>在严格模式中，向不可写的、只能读取的、不存在的属性赋值，或者向不存在的变量或对象赋值，将抛出错误。</p><h3 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h3><p>JavaScript this 关键词指的是它所属的对象。<br>它拥有不同的值，具体取决于它的使用位置：</p><ul><li>在方法中，this 指的是所有者对象。</li><li>单独的情况下，this 指的是全局对象。</li><li>在函数中，this 指的是全局对象。</li><li>在函数中，严格模式下，this 是 undefined。</li><li>在事件中，this 指的是接收事件的元素。   </li></ul><p>像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。</p><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>通过 var 关键词声明的变量没有块作用域。<br>在块 {} 内声明的变量可以从块之外进行访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  var x &#x3D; 10; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处可以使用 x</span><br></pre></td></tr></table></figure><p>可以使用 let 关键词声明拥有块作用域的变量。<br>在块 {} 内声明的变量无法从块外访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  let x &#x3D; 10;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处不可以使用 x</span><br></pre></td></tr></table></figure><h3 id="重新声明变量"><a href="#重新声明变量" class="headerlink" title="重新声明变量"></a>重新声明变量</h3><p>使用 var 关键字重新声明变量会带来问题。<br>在块中重新声明变量也将重新声明块外的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F; 此处 x 为 10</span><br><span class="line">&#123; </span><br><span class="line">  var x &#x3D; 6;</span><br><span class="line">  &#x2F;&#x2F; 此处 x 为 6</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处 x 为 6</span><br></pre></td></tr></table></figure><p>使用 let 关键字重新声明变量可以解决这个问题。<br>在块中重新声明变量不会重新声明块外的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F; 此处 x 为 10</span><br><span class="line">&#123; </span><br><span class="line">  let x &#x3D; 6;</span><br><span class="line">  &#x2F;&#x2F; 此处 x 为 6</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处 x 为 10</span><br></pre></td></tr></table></figure><h3 id="循环作用域"><a href="#循环作用域" class="headerlink" title="循环作用域"></a>循环作用域</h3><p>在循环中使用 var：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i &#x3D; 7;</span><br><span class="line">for (var i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  &#x2F;&#x2F; 一些语句</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处，i 为 10</span><br></pre></td></tr></table></figure><p>在循环中使用 let：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let i &#x3D; 7;</span><br><span class="line">for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  &#x2F;&#x2F; 一些语句</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此处 i 为 7</span><br></pre></td></tr></table></figure><p>在第一个例子中，在循环中使用的变量使用 var 重新声明了循环之外的变量。<br>在第二个例子中，在循环中使用的变量使用 let 并没有重新声明循环外的变量。<br>如果在循环中用 let 声明了变量 i，那么只有在循环内，变量 i 才是可见的。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在函数内声明变量时，使用 var 和 let 很相似。<br>它们都有函数作用域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function myFunction() &#123;</span><br><span class="line">  var carName &#x3D; &quot;porsche&quot;;   &#x2F;&#x2F; 函数作用域</span><br><span class="line">&#125;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">  let carName &#x3D; &quot;porsche&quot;;   &#x2F;&#x2F; 函数作用域</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==在函数内部定义的变量，外部无法读取，称为“局部变量”，对于var来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var v &#x3D; 1;</span><br><span class="line">function f()&#123;</span><br><span class="line"> var v &#x3D; 2;</span><br><span class="line"> console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">f() &#x2F;&#x2F; 2</span><br><span class="line">v &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>如果在块外声明声明，那么 var 和 let 也很相似。<br>它们都拥有全局作用域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 10;       &#x2F;&#x2F; 全局作用域</span><br><span class="line">let y &#x3D; 6;       &#x2F;&#x2F; 全局作用域</span><br></pre></td></tr></table></figure><h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>通过 const 定义的变量与 let 变量类似，但不能重新赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const PI &#x3D; 3.141592653589793;</span><br><span class="line">PI &#x3D; 3.14;      &#x2F;&#x2F; 会出错</span><br><span class="line">PI &#x3D; PI + 10;   &#x2F;&#x2F; 也会出错</span><br></pre></td></tr></table></figure><p>const 变量必须在声明时赋值。<br>我们不能更改常量原始值，但我们可以更改常量对象的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 您可以创建 const 对象：</span><br><span class="line">const car &#x3D; &#123;type:&quot;porsche&quot;, model:&quot;911&quot;, color:&quot;Black&quot;&#125;;</span><br><span class="line">&#x2F;&#x2F; 您可以更改属性：</span><br><span class="line">car.color &#x3D; &quot;White&quot;;</span><br><span class="line">&#x2F;&#x2F; 您可以添加属性：</span><br><span class="line">car.owner &#x3D; &quot;Bill&quot;;</span><br></pre></td></tr></table></figure><p>但是您无法重新为常量对象赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const car &#x3D; &#123;type:&quot;porsche&quot;, model:&quot;911&quot;, color:&quot;Black&quot;&#125;;</span><br><span class="line">car &#x3D; &#123;type:&quot;Volvo&quot;, model:&quot;XC60&quot;, color:&quot;White&quot;&#125;;    &#x2F;&#x2F; ERROR</span><br></pre></td></tr></table></figure><h3 id="令人误解的浮点"><a href="#令人误解的浮点" class="headerlink" title="令人误解的浮点"></a>令人误解的浮点</h3><p>JavaScript 中的数字均保存为 64 位的浮点数（Floats）。<br>所有编程语言，包括 JavaScript，都存在处理浮点值的困难：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 0.1;</span><br><span class="line">var y &#x3D; 0.2;</span><br><span class="line">var z &#x3D; x + y             &#x2F;&#x2F; z 中的结果并不是 0.3</span><br></pre></td></tr></table></figure><p>为了解决上面的问题，请使用乘除运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var z &#x3D; (x * 10 + y * 10) &#x2F; 10;       &#x2F;&#x2F; z 中的结果将是 0.3</span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX = 异步 JavaScript 和 XML。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用回调函数"><a href="#使用回调函数" class="headerlink" title="使用回调函数"></a>使用回调函数</h3><p>回调函数是一种以参数形式传递给另一个函数的函数。<br>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。<br>该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">function loadXMLDoc(url,cfunc)</span><br><span class="line">&#123;</span><br><span class="line">if (window.XMLHttpRequest)</span><br><span class="line">  &#123;&#x2F;&#x2F; IE7+, Firefox, Chrome, Opera, Safari 代码</span><br><span class="line">  xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">  &#123;&#x2F;&#x2F; IE6, IE5 代码</span><br><span class="line">  xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.onreadystatechange&#x3D;cfunc;</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,url,true);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">loadXMLDoc(&quot;&#x2F;try&#x2F;ajax&#x2F;ajax_info.txt&quot;,function()</span><br><span class="line">&#123;</span><br><span class="line">if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(&quot;myDiv&quot;).innerHTML&#x3D;xmlhttp.responseText;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose教程</title>
      <link href="/2019/04/05/Mongo/"/>
      <url>/2019/04/05/Mongo/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB 是一个基于==分布式==文件存储的数据库。    </p><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是==非关系数据==库当中功能最丰富，最像关系数据库的。</p><h1 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h1><p>node环境下对mongodb进行便捷操作的对象模型工具。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install mongoose</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用包</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//连接</span></span><br><span class="line">mongoose.connect(</span><br><span class="line">    <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        useNewUrlParser: <span class="literal">true</span>, </span><br><span class="line">        useUnifiedTopology: <span class="literal">true</span>,</span><br><span class="line">        useCreateIndex:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Schema为表的结构</span></span><br><span class="line"><span class="keyword">var</span> kittySchema = mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//编译成model</span></span><br><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">'Kitten'</span>, kittySchema);</span><br></pre></td></tr></table></figure><h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数speak</span></span><br><span class="line">kittySchema.methods.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="keyword">this</span>.name</span><br><span class="line">    ? <span class="string">"Meow name is "</span> + <span class="keyword">this</span>.name</span><br><span class="line">    : <span class="string">"I don't have a name"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加在 schema methods 属性的函数会编译到 Model 的 prototype， 也会暴露到每个 document 实例</span></span><br><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">'Kitten'</span>, kittySchema);</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">var</span> fluffy = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">'fluffy'</span> &#125;);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fluffy.speak(); <span class="comment">// "Meow name is fluffy"</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><a href="http://www.mongoosejs.net/docs/api.html#model_Model" target="_blank" rel="noopener">Model</a> 的方法中包含查询条件参数的（ <a href="http://www.mongoosejs.net/docs/api.html#model_Model.find" target="_blank" rel="noopener">find</a> <a href="http://www.mongoosejs.net/docs/api.html#model_Model.findById" target="_blank" rel="noopener">findById</a> <a href="http://www.mongoosejs.net/docs/api.html#model_Model.count" target="_blank" rel="noopener">count</a> <a href="http://www.mongoosejs.net/docs/api.html#model_Model.update" target="_blank" rel="noopener">update</a> ）都可以按以下两种方式执行：</p><ul><li>传入 <code>callback</code> 参数，操作会被立即执行，查询结果被传给回调函数（ callback ）。</li><li>不传 <code>callback</code> 参数，<a href="http://www.mongoosejs.net/docs/api.html#query-js" target="_blank" rel="noopener">Query</a> 的一个实例（一个 query 对象）被返回，这个 query 提供了构建查询器的特殊接口。</li></ul><p><strong>传入 <code>callback</code> 参数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, yourSchema);</span><br><span class="line"><span class="comment">// 查询每个 last name 是 'Ghost' 的对象，结果返回在person</span></span><br><span class="line">Person.findOne(&#123; <span class="string">'name.last'</span>: <span class="string">'Ghost'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);</span><br><span class="line">  <span class="comment">// Prints "Space Ghost is a talk show host".</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'%s %s is a %s.'</span>, person.name.first, person.name.last);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Mongoose 中所有的回调函数都使用 <code>callback(error, result)</code> 这种模式。如果查询时发生错误，<code>error</code> 参数即是错误文档， <code>result</code> 参数会是 null。如果查询成功，<code>error</code> 参数是 null，<code>result</code> 即是查询的结果。</p><p><strong>不传入 <code>callback</code> 参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询每个 last name 是 'Ghost' 的对象，赋值给一个实例</span></span><br><span class="line"><span class="keyword">var</span> query = Person.findOne(&#123; <span class="string">'name.last'</span>: <span class="string">'Ghost'</span> &#125;);</span><br><span class="line"><span class="comment">//实例提供了查询接口，如 select `name` 和 `occupation` 字段</span></span><br><span class="line">query.select(<span class="string">'name occupation'</span>);</span><br><span class="line"><span class="comment">// 然后执行查询</span></span><br><span class="line">query.exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);</span><br><span class="line">  <span class="comment">// Prints "Space Ghost is a talk show host."</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'%s %s is a %s.'</span>, person.name.first, person.name.last,person.occupation);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>常用查询参数</strong></p><p>where()、limit()、skip()、sort()、exec()、find()等</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express教程</title>
      <link href="/2019/01/05/Express/"/>
      <url>/2019/01/05/Express/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建一个 package.json 文件</span><br><span class="line"><span class="attribute">npm</span> init</span><br><span class="line">//安装依赖</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>))</span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>))</span><br></pre></td></tr></table></figure><h3 id="静态文件托管"><a href="#静态文件托管" class="headerlink" title="静态文件托管"></a>静态文件托管</h3><p>为了使用静态文件(html、css、js、img等)，使用 Express 中的 express.static 内置中间件函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根路径带有地址则访问时必须加上才能访问</span></span><br><span class="line"><span class="comment">//public为指定的静态文件夹</span></span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>))</span><br></pre></td></tr></table></figure><h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><p>安装cors</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> i cors</span><br></pre></td></tr></table></figure><p>使用方法，==写在路由前==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'cors'</span>)())</span><br></pre></td></tr></table></figure><h3 id="识别json"><a href="#识别json" class="headerlink" title="识别json"></a>识别json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.json())</span><br></pre></td></tr></table></figure><h3 id="创建api"><a href="#创建api" class="headerlink" title="创建api"></a>创建api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api/资源名/:参数(id)'</span>,<span class="keyword">async</span>(req,res) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> article = <span class="keyword">await</span> Article.create(req.body)</span><br><span class="line">  <span class="comment">//const article = await Article.findById(req.params.id)</span></span><br><span class="line">  res.send(article)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
